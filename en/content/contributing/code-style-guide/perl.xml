<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="code-style-guide-perl">
    <title>Perl</title>

    <section id="formatting">
        <title>Formatting</title>


        <section id="whitespace">
            <title>Whitespace</title>
            <para>
                TAB: We use 4 spaces. Examples for braces:
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
if ($Condition) {
    Foo();
}
else {
    Bar();
}

while ($Condition == 1) {
    Foo();
}
                ]]>
                </programlisting>
            </para>
        </section>

        <section id="line-length">
            <title>Length of lines</title>
            <para>
                Lines should generally not be longer than 120 characters,
                unless it is necessary for special reasons.
            </para>
        </section>

        <section id="parentheses">
            <title>Spaces and parentheses</title>
            <para>
                To gain more readability, we use spaces between keywords and opening parenthesis.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
if ()...
for ()...
                ]]>
                </programlisting>
            </para>
            <para>
                If there is just one single variable, the parenthesis enclose the variable with no spaces inside.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
if ($Condition) { ... }

# instead of

if ( $Condition ) { ... }
                ]]>
                </programlisting>
            </para>
            <para>
                If the condition is not just one single variable, we use spaces between the parenthesis and the condition.
                And there is still the space between the keyword (e.g. <literal>if</literal>) and the opening parenthesis.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
if ( $Condition && $ABC ) { ... }
                ]]>
                </programlisting>
            </para>
            <para>
                Note that for Perl builtin functions, we do not use parentheses:
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
chomp $Variable;
                ]]>
                </programlisting>
            </para>
        </section>


        <section id="source-code-header">
            <title>Source code header and charset</title>
            <para>
                Attach the following header to every source file.
                Source files are saved in UTF-8 charset.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
# --
# (file name) - a short description what it does
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --
                ]]>
                </programlisting>
            </para>
            <para>
                Executable files (<filename>*.pl</filename>) have a special header.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
#!/usr/bin/perl
# --
# (file name) - a short description what it does
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --
                ]]>
                </programlisting>
            </para>
        </section>
    </section> <!-- formatting -->

    <section id="using-perl-language">
        <title>Using the Perl language</title>

        <section id="control-flow">
            <title>Control flow</title>

            <section id="conditions">
                <title>Conditions</title>
                <para>
                    Conditions can be quite complex and there can be "chained" conditions (linked with logical 'or' or 'and' operations).
                    When coding for OTRS, you have to be aware of several situations.
                </para>
                <para>
                    Perl Best Practices says, that high precedence operators (<literal>&amp;&amp;</literal> and <literal>||</literal>) shouldn't mixed up with low precedence operators (<literal>and</literal> and <literal>or</literal>).
                    To avoid confusion, we always use the high precedence operators.
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
if ( $Condition1 && $Condition2 ) { ... }

# instead of

if ( $Condition and $Condition2 ) { ... }
                    ]]>
                    </programlisting>
                </para>
                <para>
                    This means that you have to be aware of traps. Sometimes you need to use parenthesis to make clear what you want.
                </para>
                <para>
                    If you have long conditions (line is longer than 120 characters over all), you have to break it in several lines.
                    And the start of the conditions is in a new line (not in the line of the <literal>if</literal>).
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
if (
    $Condition1
    && $Condition2
    )
{ ... }

# instead of

if ( $Condition1
    && $Condition2
    )
{ ... }
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Also note, that the right parenthesis is in a line on its own and the left curly bracket
                    is also in a new line and with the same indentation as the <literal>if</literal>.
                    The operators are at the beginning of a new line! The subsequent examples show how to do it...
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
if (
    $XMLHash[0]->{otrs_stats}[1]{StatType}[1]{Content}
    && $XMLHash[0]->{otrs_stats}[1]{StatType}[1]{Content} eq 'static'
    )
{ ... }

if ( $TemplateName eq 'AgentTicketCustomer' ) {
    ...
}

if (
    ( $Param{Section} eq 'Xaxis' || $Param{Section} eq 'All' )
    && $StatData{StatType} eq 'dynamic'
    )
{ ... }

if (
    $Self->{TimeObject}->TimeStamp2SystemTime( String => $Cell->{TimeStop} )
    > $Self->{TimeObject}->TimeStamp2SystemTime(
        String => $ValueSeries{$Row}{$TimeStop}
    )
    || $Self->{TimeObject}->TimeStamp2SystemTime( String => $Cell->{TimeStart} )
    < $Self->{TimeObject}->TimeStamp2SystemTime(
        String => $ValueSeries{$Row}{$TimeStart}
    )
    )
{ ... }
                    ]]>
                    </programlisting>
                </para>
            </section>

            <section id="postfix-if">
                <title>Postfix <literal>if</literal></title>
                <para>
                    Generally we use "postfix <literal>if</literal>" statements to reduce the number of levels.
                    But we don't use it for multiline statements and is only allowed when involves return statements in functions or to end a loop or to go next iteration.
                </para>
                <para>
                    This is correct:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
next ITEM if !$ItemId;
                    ]]>
                    </programlisting>
                </para>
                <para>
                    This is wrong:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
return $Self->{LogObject}->Log(
    Priority => 'error',
    Message  => 'ItemID needed!',
) if !$ItemId;
                    ]]>
                    </programlisting>
                </para>
                <para>
                    This is less maintainable than this:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
if( !$ItemId ) {
    $Self->{LogObject}->Log( ... );
    return;
}
                    ]]>
                    </programlisting>
                </para>
                <para>
                    This is correct:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
for my $Needed (1..10) {
    next if $Needed == 5;
    last  if $Needed == 9;
}
                    ]]>
                    </programlisting>
                </para>
                <para>
                    This is wrong:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my $Var = 1 if $Something == 'Yes';
                    ]]>
                    </programlisting>
                </para>
            </section>
        </section>

        <section id="builtin-sub-restrictions">
            <title>Restrictions for the use of some Perl builtins</title>
            <para>
                Some builtin subroutines of Perl may not be used in every place:
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Don't use <literal>die</literal> and <literal>exit</literal> in <filename>.pm</filename> files.</para>
                    </listitem>
                    <listitem>
                        <para>Don't use the <literal>Dumper</literal> function in released files.</para>
                    </listitem>
                    <listitem>
                        <para>Don't use <literal>print</literal> in <filename>.pm</filename> files.</para>
                    </listitem>
                    <listitem>
                        <para>Don't use <literal>require</literal>, use <literal>Main::Require()</literal> instead.</para>
                    </listitem>
                    <listitem>
                        <para>Use the functions of the <literal>TimeObject</literal> instead of the builtin functions like <literal>time()</literal>, <literal>localtime()</literal>, etc.</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>

        <section id="regular-expressions">
            <title>Regular Expressions</title>
            <para>
                For regular expressions we always use the <literal>m//</literal> operator with curly braces as delimiters. We also use the modifiers <literal>x</literal>, <literal>m</literal> and <literal>s</literal>.
                The <literal>x</literal> modifiers allows you to comment your regex and use spaces to "group" logical groups.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
$Date =~ m{ \A \d{4} - \d{2} - \d{2} \z }xms
$Date =~ m{
    \A      # beginning of the string
    \d{4} - # year
    \d{2} - # month
    [^\n]   # everything but newline
    #..
}xms;
    ]]>
                </programlisting>
            </para>
            <para>
                As the space no longer has a special meaning, you have to use a single character class to match a single space (<literal>[ ]</literal>).
                If you want to match any whitespace you can use <literal>\s</literal>.
            </para>
            <para>
                In the regex, the dot (<literal>.</literal>) includes the newline (whereas in regex without <literal>s</literal> modifier the dot means 'everything but newline').
                If you want to match anything but newline, you have to use the negated single character class (<literal>[^\n]</literal>).
            </para>
            <para>
            <programlisting format="linespecific"><![CDATA[
$Text =~ m{
    Test
    [ ]    # there must be a space between 'Test' and 'Regex'
    Regex
}xms;
    ]]></programlisting>
            </para>
        </section>

        <section id="naming">
            <title>Naming</title>
            <para>
                Names and comments are written in English. Variables, objects and methods
                must be descriptive nouns or noun phrases with the first letter set upper case (<ulink url="https://en.wikipedia.org/wiki/CamelCase">CamelCase</ulink>).
            </para>
            <para>
                Names should be as descriptive as possible.
                A reader should be able to say what is meant by a name without digging too deep into the code. E.g. use <literal>$ConfigItemID</literal> instead of <literal>$ID</literal>. Examples: <literal>@TicktIDs</literal>, <literal>$Output</literal>, <literal>StateSet()</literal>, etc.
            </para>
        </section>


        <section id="variables">
            <title>Variables</title>

            <section id="variable-declaration">
                <title>Declaration</title>

                <para>
                    If you have several variables, you can declare them in one line if they "belong together":
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my ($Minute, $Hour, $Year);
]]>
                    </programlisting>
                </para>
                <para>
                    Otherwise break it into separate lines:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[

my $Minute;
my $ID;
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Do not set to <literal>undef</literal> or <literal>''</literal> in the declaration as this might hide mistakes in code.
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my $Variable = undef;

# is the same as

my $Variable;
                    ]]>
                    </programlisting>
                </para>
                <para>
                    You can set a variable to <literal>''</literal> if you want to concatenate strings:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my $SqlStatement = '';
for my $Part ( @Parts ) {
    $SqlStatement .= $Part;
}
                    ]]>
                    </programlisting>
                </para>
                <para>
                    Otherwise you would get an "uninitialized" warning.
                </para>
            </section>
        </section>

        <section id="subroutines">
            <title>Subroutines</title>

            <section id="subroutines-parameters">
                <title>Handling of parameters</title>

                <para>
                    To fetch the parameters passed to subroutines, OTRS normally uses the hash <literal>%Param</literal> (not <literal>%Params</literal>).
                    This leads to more readable code as every time we use <literal>%Param</literal> in the subroutine code we know it is the parameter hash passed to the subroutine.
                </para>
                <para>
                    Just in some exceptions a regular list of parameters should be used.
                    So we want to avoid something like this:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
sub TestSub {
    my ( $Self, $Param1, $Param2 ) = @_;
}
                    ]]>
                    </programlisting>
                </para>
                <para>
                    We want to use this instead:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
sub TestSub {
    my ( $Self, %Param ) = @_;
}
                    ]]>
                    </programlisting>
                </para>
                <para>
                    This has several advantages: We do not have to change the code in the subroutine when a new parameter should be passed,
                    and calling a function with named parameters is much more readable.
                </para>
            </section>

            <section id="multiple-named-parameters">
                <title>Multiple named parameters</title>
                <para>
                    If a function call requires more than one named parameter, split them into multiple lines:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
    $Self->{LogObject}->Log(
        Priority => 'error',
        Message  => "Need $Needed!",
    );
                    ]]></programlisting>
                </para>
                <para>
                    Instead of:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
    $Self->{LogObject}->Log( Priority => 'error', Message  => "Need $Needed!", );
                    ]]></programlisting>
                </para>
            </section>

            <section id="return-statements">
                <title><literal>return</literal> statements</title>
                <para>
                    Subroutines have to have a <literal>return</literal> statement.
                    The explicit <literal>return</literal> statement is preferred over the implicit way (result of last statement in subroutine) as this clarifies what the subroutine returns.
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
sub TestSub {
    ...
    return; # return undef, but not the result of the last statement
}
                    ]]>
                    </programlisting>
                </para>
            </section>
            <section id="explicit-return-values">
                <title>Explicit return values</title>
                <para>
                    Explicit return values means that you should not have a <literal>return</literal> statement followed by a subroutine call.
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
return $Self->{DBObject}->Do( ... );
                    ]]>
                    </programlisting>
                </para>
                <para>
                    The following example is better as this says explicitly what is returned. With the example above the reader doesn't know what the return value is as he might not know what <literal>Do()</literal> returns.
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
return if !$Self->{DBObject}->Do( ... );
return 1;
                    ]]>
                    </programlisting>
                </para>
                <para>
                    If you assign the result of a subroutine to a variable, a "good" variable name indicates what was returned:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
my $SuccessfulInsert = $Self->{DBObject}->Do( ... );
return $SuccessfulInsert;
                    ]]>
                    </programlisting>
                </para>
            </section>
        </section>

        <section id="packages">
            <title>Packages</title>

            <section id="packages-use">
                <title><literal>use</literal> statements</title>
                <para>
                    <literal>use strict</literal> and <literal>use warnings</literal> have to be the first two "use"s in a module. This is correct:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
package Kernel::System::ITSMConfigItem::History;

use strict;
use warnings;

use Kernel::System::User;
use Kernel::System::Time;
                    ]]>
                    </programlisting>
                </para>
                <para>
                    This is wrong:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
package Kernel::System::ITSMConfigItem::History;

use Kernel::System::User;
use Kernel::System::Time;

use strict;
use warnings;
                    ]]>
                    </programlisting>
                </para>
            </section>

            <section id="objects-allocation">
                <title>Objects and their allocation</title>
                <para>
                    In OTRS many objects are available. But you should not use every object in every file
                    to keep the frontend/backend separation.
                </para>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>Don't use the <literal>LayoutObject</literal> in core modules (<filename>Kernel/System</filename>).</para>
                        </listitem>
                        <listitem>
                            <para>Don't use the <literal>ParamObject</literal> in core modules (<filename>Kernel/System</filename>).</para>
                        </listitem>
                        <listitem>
                            <para>Don't use the <literal>DBObject</literal> in frontend modules (<filename>Kernel/Modules</filename>).</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </section>

        </section>

    </section> <!-- using-perl-language -->

    <section id="documentation">
        <title>Writing good documentation</title>

        <section id="perldoc">
            <title>Perldoc</title>

            <section id="documenting-subroutines">
                <title>Documenting subroutines</title>

                <para>
                    Subroutines should always be documented. The documentation contains a general description about what the subroutine does, a sample subroutine call and what the subroutine returns. It should be in this order. A sample documentation looks like this:
                </para>
                <para>
                    <programlisting format="linespecific"><![CDATA[
=item LastTimeObjectChanged()

calculates the last time the object was changed. It returns a hash reference with
    information about the object and the time.

    my $Info = $Object->LastTimeObjectChanged(
        Param => 'Value',
    );

This returns something like:

    my $Info = {
        ConfigItemID    => 1234,
        HistoryType     => 'foo',
        LastTimeChanged => '08.10.2009',
    };

=cut
                    ]]></programlisting>
                </para>
                <para>
                    You can copy and paste a <literal>Data::Dumper</literal> output for the return values.
                </para>
            </section>
        </section>

        <section id="code-style-guide-perl-code-comments">
            <title>Code Comments</title>

            <para>
                In general, you should try to write your code as readable and self-explaining as possible.
                Don't write a comment to explain what obvious code does, this is unnecessary duplication.
                Good comments should explain <emphasis>why</emphasis> there is some code, possible side
                effects and anything that might be special or unusually complicated about the code.
            </para>

            <para>
                Please adhere to the following guidelines:
            </para>

            <variablelist>

                <varlistentry>
                    <term>Make the code so readable that comments are not needed, if possible.</term>
                    <listitem>
                        <para>
                            It's always preferable to write code so that it is very readable and self-explaining, for example with precise variable and function names.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Don't say what the code says (DRY).</term>
                    <listitem>
                        <para>
                            Don't repeat (obvious) code in the comments.
                        </para>
                        <programlisting format="linespecific"><![CDATA[
# WRONG:

# get config object
my $ConfigObject = $Kernel::OM->Get('Kernel::Config');
                        ]]></programlisting>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Document <emphasis>why</emphasis> the code is there, not how it works.</term>
                    <listitem>
                        <para>
                            Usually, code comments should explain the <emphasis>purpose</emphasis> of code, not how it works in detail. There might be exceptions for specially complicated code, but in this case also a refactoring to make it more readable could be commendable.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Document pitfalls.</term>
                    <listitem>
                        <para>
                            Everything that is unclear, tricky or that puzzled you during development should be documented.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Use full-line sentence-style comments to document algorithm paragraphs.</term>
                    <listitem>
                        <para>
                            Always use full sentences (uppercase first letter and final period). Subsequent lines of a sentence should be indented.
                        </para>
                        <programlisting format="linespecific"><![CDATA[
# Check if object name is provided.
if ( !$_[1] ) {
    $_[0]->_DieWithError(
        Error => "Error: Missing parameter (object name)",
    );
}

# Record the object we are about to retrieve to potentially build better error messages.
# Needs to be a statement-modifying 'if', otherwise 'local' is local
#   to the scope of the 'if'-block.
local $CurrentObject = $_[1] if !$CurrentObject;
                        ]]></programlisting>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Use short end-of-line comments to add detail information.</term>
                    <listitem>
                        <para>
                            These can either be a complete sentence (capital first letter and period) or just a phrase (lowercase first letter and no period).
                        </para>
                        <programlisting format="linespecific"><![CDATA[
$BuildMode = oct $Param{Mode};   # *from* octal, not *to* octal

# or

$BuildMode = oct $Param{Mode};   # Convert *from* octal, not *to* octal.

                        ]]></programlisting>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
    </section>


    <section id="database-interaction">
        <title>Database interaction</title>

        <section id="database-sql-statements">
            <title>Declaration of SQL statements</title>
            <para>
                If there is no chance for changing the SQL statement, it should be used in the <literal>Prepare</literal> function.
                The reason for this is, that the SQL statement and the bind parameters are closer to each other.
            </para>
            <para>
                The SQL statement should be written as one nicely indented string without concatenation like this:
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
return if !$Self->{DBObject}->Prepare(
    SQL => '
        SELECT art.id
        FROM article art, article_sender_type ast
        WHERE art.ticket_id = ?
            AND art.article_sender_type_id = ast.id
            AND ast.name = ?
        ORDER BY art.id',
    Bind => [ \$Param{TicketID}, \$Param{SenderType} ],
);
                ]]></programlisting>
            </para>
            <para>
                This is easy to read and modify, and the whitespace can be handled well by our supported DBMSs.
                For auto-generated SQL code (like in <literal>TicketSearch</literal>), this indentation is not necessary.
            </para>
        </section>
        <section id="database-returning-on-errors">
            <title>Returning on errors</title>
            <para>
                Whenever you use database functions you should handle errors. If anything goes wrong, return from subroutine:
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
return if !$Self->{DBObject}->Prepare( ... );
                ]]></programlisting>
            </para>
        </section>
        <section id="database-using-limit">
            <title>Using Limit</title>
            <para>
                Use <literal>Limit => 1</literal> if you expect just one row to be returned.
            </para>
            <para>
                <programlisting format="linespecific"><![CDATA[
$Self->{DBObject}->Prepare(
    SQL   => 'SELECT id FROM users WHERE username = ?',
    Bind  => [ \$Username ],
    Limit => 1,
);
                ]]></programlisting>
            </para>
        </section>
        <section id="database-using-while-loop">
            <title>Using the <literal>while</literal> loop</title>
            <para>
                Always use the <literal>while</literal> loop, even when you expect one row to be returned,
                as some databases do not release the statement handle and this can lead to weird bugs.
            </para>
        </section>

    </section>

</section>
