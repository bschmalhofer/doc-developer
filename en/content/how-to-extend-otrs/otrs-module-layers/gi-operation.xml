<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="operation">
    <title>Operation</title>
    <para>
        The operation is used to perform an action within OTRS, this action is requested by the
        external system and can include special parameters in order to correctly execute the action.
        After the action is performed, OTRS sends a defined confirmation to the external system.
    </para>
    <section id="adding_operation">
        <title>Operation backend</title>
        <para>
            Next we will show how to develop a new Operation, each operation has to implement these
            subroutines
        </para>
        <para>
            <itemizedlist mark="round">
                <listitem>
                    <para>new</para>
                </listitem>
                <listitem>
                    <para>Run</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            We should implement each one of this methods in order to be able to execute the action
            handled by the provider ('Kernel/GenericInterface/Provider.pm').
        </para>
        <section id="operation_code_example">
            <title>Code example</title>
            <para>
                In this section a sample operation module is shown and each subroutine is explained.
            </para>
            <para>
                <programlisting><![CDATA[
# --
# Kernel/GenericInterface/Operation/Test/Test.pm - GenericInterface test operation backend
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::GenericInterface::Operation::Test::Test;

use strict;
use warnings;

use Kernel::System::VariableCheck qw(IsHashRefWithData);

our $ObjectManagerDisabled = 1;
                ]]></programlisting>
            </para>
            <para>
                This is common header that can be found in common OTRS modules. The class/package
                name is declared via the package keyword.
            </para>
            <para>
                We also include VariableCheck module to perform certain validation over some
                variables. Operations can not be instantiated by the Object Manager.
            </para>
            <para>
                <programlisting><![CDATA[
sub new {
    my ( $Type, %Param ) = @_;

    my $Self = {};
    bless( $Self, $Type );

    # check needed objects
    for my $Needed (qw(DebuggerObject)) {
        if ( !$Param{$Needed} ) {
            return {
                Success      => 0,
                ErrorMessage => "Got no $Needed!"
            };
        }

        $Self->{$Needed} = $Param{$Needed};
    }

    return $Self;
}
                ]]></programlisting>
            </para>
            <para>
                The constructor 'new' creates a new instance of the class. According to the coding
                guidelines only objects of other classes not handled by the object manager that are
                needed in this module have to be created in "new".
            </para>
            <para>
                <programlisting><![CDATA[
sub Run {
    my ( $Self, %Param ) = @_;

    # check data - only accept undef or hash ref
    if ( defined $Param{Data} && ref $Param{Data} ne 'HASH' ) {

        return $Self->{DebuggerObject}->Error(
            Summary => 'Got Data but it is not a hash ref in Operation Test backend)!'
        );
    }

    if ( defined $Param{Data} && $Param{Data}->{TestError} ) {

        return {
            Success      => 0,
            ErrorMessage => "Error message for error code: $Param{Data}->{TestError}",
            Data         => {
                ErrorData => $Param{Data}->{ErrorData},
            },
        };
    }

    # copy data
    my $ReturnData;

    if ( ref $Param{Data} eq 'HASH' ) {
        $ReturnData = \%{ $Param{Data} };
    }
    else {
        $ReturnData = undef;
    }

    # return result
    return {
        Success => 1,
        Data    => $ReturnData,
    };
}
                ]]></programlisting>
            </para>
            <para>
                The 'Run' function is the main part of each operation, it receives all internal
                mapped data from remote system needed by the provider to execute the action, it
                performs the action and returns the result to the provider to be external mapped
                and deliver back to the remote system.
            </para>
            <para>
                This particular example returns the same data as came from the remote system,
                unless "TestError" parameter is passed in this case it returns an error.
            </para>
        </section>
        <section id="operation-configuration">
            <title>Configuration Example</title>
            <para>
                There is the need to register this operation module to be accessible in the OTRS
                GUI. This can be done using the XML configuration below.
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
<ConfigItem Name="GenericInterface::Operation::Module###Test::Test" Required="0" Valid="1">
    <Description Translatable="1">GenericInterface module registration for the operation layer.</Description>
    <Group>GenericInterface</Group>
    <SubGroup>GenericInterface::Operation::ModuleRegistration</SubGroup>
    <Setting>
        <Hash>
            <Item Key="Name">Test</Item>
            <Item Key="Controller">Test</Item>
            <Item Key="ConfigDialog">AdminGenericInterfaceOperationDefault</Item>
        </Hash>
    </Setting>
</ConfigItem>
                ]]></programlisting>
            </para>
        </section>
    </section>
</section>
