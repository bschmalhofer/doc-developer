<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="scheduler-overview">
    <title>OTRS Scheduler</title>
    <para>
        The OTRS Scheduler is a conjunction of daemon modules and task workers that runs together
        in order to perform all needed OTRS tasks asynchronously from the web server process.
    </para>
    <section id="scheduler-task-managers">
        <title>OTRS Scheduler Task Managers</title>
        <para>
            <literal>SchedulerCronTaskManager</literal> reads registered cron tasks from the OTRS
            SysConfig and determines the correct time to create a task to be executed.
        </para>
        <para>
            <literal>SchedulerFutureTaskManager</literal> checks the tasks that are set to be executed
            just one time in the future and sets this task to be executed in time. For example, when a
            Generic Interface Invoker can not reach the remote server, it can self schedule to be run
            again 5 minutes later.
        </para>
        <para>
            <literal>SchedulerGenericAgentTaskManager</literal> continuously reads the
            <literal>GenericAgent</literal> tasks that are set to be run on regular time basis and sets
            their execution accordingly.
        </para>
        <para>
            Whenever these tasks managers are not enough, a new daemon module can be created. At a
            certain point of its <literal>Run()</literal> method it needs to call <literal>TaskAdd()</literal>
            from the <literal>chedulerDB</literal> object to register a task, and as soon as it is registered,
            it will be executed in the next free slot by the <literal>SchedulerTaskWorker</literal>.
        </para>
    </section>
    <section id="scheduler-task-workers">
        <title>OTRS Scheduler Task Workers</title>
            <para>
                <literal>SchedulerTaskWorker</literal> execute all tasks planned by the previous tasks
                managers plus the ones that come directly from the code by using the Asynchronous Executor.
            </para>
            <para>
                In order to execute each task, the <literal>SchedulerTaskWorker</literal> calls a backend
                module (Task Worker) to perform the specific task. The worker module is determined by the
                task type. If a new task type is added, it will require a new task worker.
            </para>

            <section id="creating-new-scheduler-task-worker">
                <title>Creating A New Scheduler Task Worker</title>
                <para>
                    All files placed under
                    <filename>Kernel/System/Daemon/DaemonModules/SchedulerTaskWorker</filename>
                    could potentially be task workers and they do not require any registration in
                    the system configuration.
                </para>
                <section id="scheduler-task-worker-code-example">
                    <title>Scheduler Task Worker Code Example</title>
                    <para>
                        <programlisting><![CDATA[
# --
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::System::Daemon::DaemonModules::SchedulerTaskWorker::TestWorker;

use strict;
use warnings;

use parent qw(Kernel::System::Daemon::DaemonModules::BaseTaskWorker);

our @ObjectDependencies = (
    'Kernel::System::Log',
);
                        ]]></programlisting>
                    </para>
                    <para>
                        This is common header that can be found in most OTRS modules. The
                        class/package name is declared via the <literal>package</literal> keyword.
                    </para>
                    <para>
                        In this case we are inheriting from <literal>BaseTaskWorker</literal> class,
                        and the object manager dependencies are set.
                    </para>
                    <para>
                        <programlisting><![CDATA[
sub new {
    my ( $Type, %Param ) = @_;

    my $Self = {};
    bless( $Self, $Type );

    $Self->{Debug}      = $Param{Debug};
    $Self->{WorkerName} = 'Worker: Test';

    return $Self;
}
                        ]]></programlisting>
                    </para>
                    <para>
                        The constructor <literal>new</literal> creates a new instance of the class.
                    </para>
                    <para>
                        <programlisting><![CDATA[
sub Run {
    my ( $Self, %Param ) = @_;

    # Check task params.
    my $CheckResult = $Self->_CheckTaskParams(
        %Param,
        NeededDataAttributes => [ 'NeededAtrribute1', 'NeededAtrribute2' ],
        DataParamsRef        => 'HASH', # or 'ARRAT'
    );

    # Stop execution if an error in params is detected.
    return if !$CheckResult;

    my $Success;
    my $ErrorMessage;

    if ( $Self->{Debug} ) {
        print "    $Self->{WorkerName} executes task: $Param{TaskName}\n";
    }

    do {

        # Localize the standard error.
        local *STDERR;

        # Redirect the standard error to a variable.
        open STDERR, ">>", \$ErrorMessage;

        $Success = $Kernel::OM->Get('Kernel::System::MyPackage')->Run(
            Param1 => 'someparam',
        );
    };

    if ( !$Success ) {

        $ErrorMessage ||= "$Param{TaskName} execution failed without an error message!";

        $Self->_HandleError(
            TaskName     => $Param{TaskName},
            TaskType     => 'Test',
            LogMessage   => "There was an error executing $Param{TaskName}: $ErrorMessage",
            ErrorMessage => "$ErrorMessage",
        );
    }

    return $Success;
}
                        ]]></programlisting>
                    </para>
                    <para>
                        The <literal>Run</literal> is the main method. A call to
                        <literal>_CheckTaskParams()</literal> from the base class will save some lines
                        of code. Executing the task while capturing the STDERR is a very good practice,
                        since the OTRS Scheduler runs normally unattended, and saving all errors to a
                        variable will make it available for further processing.
                        <literal>_HandleError()</literal> provides a common interface to send the error
                        messages as email to the recipient specified in the System Configuration.
                    </para>
                    <para>
                        <programlisting><![CDATA[
1;
                        ]]></programlisting>
                    </para>
                    <para>
                        End of file.
                    </para>
                </section>
        </section>
    </section>
</section>
