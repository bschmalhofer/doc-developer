<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="invoker">
    <title>Invoker</title>
    <para>
        The invoker is used to create a request from OTRS to a Remote System. This part of the GI
        is in charge of perform necessary tasks in OTRS side, to gather the necessary data in order
        to construct the request.
    </para>
    <section id="adding_invoker">
        <title>Invoker backend</title>
        <para>
            Next we will show how to develop a new Invoker. Each invoker has to implement these
            subroutines:
        </para>
        <para>
            <itemizedlist mark="round">
                <listitem>
                    <para><literal>new</literal></para>
                </listitem>
                <listitem>
                    <para><literal>PrepareRequest</literal></para>
                </listitem>
                <listitem>
                    <para><literal>HandleResponse</literal></para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            We should implement each one of this methods in order to be able to execute a request
            using the request handler (<filename>Kernel/GenericInterface/Requester.pm</filename>).
        </para>
        <section id="invoker_code_example">
            <title>Code example</title>
            <para>
                In this section a sample invoker module is shown and each subroutine is explained.
            </para>
            <para>
                <programlisting><![CDATA[
# --
# Kernel/GenericInterface/Invoker/Test.pm - GenericInterface test data Invoker backend
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::GenericInterface::Invoker::Test::Test;

use strict;
use warnings;

use Kernel::System::VariableCheck qw(IsString IsStringWithData);

# prevent 'Used once' warning for Kernel::OM
use Kernel::System::ObjectManager;

our $ObjectManagerDisabled = 1;
                ]]></programlisting>
            </para>
            <para>
                This is common header that can be found in common OTRS modules. The class/package
                name is declared via the <literal>package</literal> keyword. Invokers can not be instantiated by the
                Object Manager.
            </para>
            <para>
                <programlisting><![CDATA[
sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {};
    bless( $Self, $Type );

    # check needed params
    if ( !$Param{DebuggerObject} ) {
        return {
            Success      => 0,
            ErrorMessage => "Got no DebuggerObject!"
        };
    }

    $Self->{DebuggerObject} = $Param{DebuggerObject};

    return $Self;
}
                ]]></programlisting>
            </para>
            <para>
                The constructor <literal>new</literal> creates a new instance of the class. According to the coding
                guidelines only objects of other classes not handled by the object manager that are
                needed in this module have to be created in <literal>new</literal>.
            </para>
            <para>
                <programlisting><![CDATA[
sub PrepareRequest {
    my ( $Self, %Param ) = @_;

    # we need a TicketNumber
    if ( !IsStringWithData( $Param{Data}->{TicketNumber} ) ) {
        return $Self->{DebuggerObject}->Error( Summary => 'Got no TicketNumber' );
    }

    my %ReturnData;

    $ReturnData{TicketNumber} = $Param{Data}->{TicketNumber};

    # check Action
    if ( IsStringWithData( $Param{Data}->{Action} ) ) {
        $ReturnData{Action} = $Param{Data}->{Action} . 'Test';
    }

    # check request for system time
    if ( IsStringWithData( $Param{Data}->{GetSystemTime} ) && $Param{Data}->{GetSystemTime} ) {
        $ReturnData{SystemTime} = $Kernel::OM->Get('Kernel::System::Time')->SystemTime();
    }

    return {
        Success => 1,
        Data    => \%ReturnData,
    };
}
                ]]></programlisting>
            </para>
            <para>
                The <literal>PrepareRequest</literal> function is used to handle and collect all needed data to be
                sent into the request. Here we can receive data from the request handler, use it,
                extend it, generate new data, and after that, we can transfer the results to the
                mapping layer.
            </para>
            <para>
                For this example we are expecting to receive a ticket number. If there isn't then we
                use the debugger method <code>Error()</code> that creates an entry in the debug log and also
                returns a structure with the parameter <literal>Success</literal> as 0 and an error message as the passed
                <literal>Summary</literal>.
            </para>
            <para>
                Also this example appends the word "Test" to the parameter <literal>Action</literal> and if
                <literal>GetSystemTime</literal> is requested, it will fill the <literal>SystemTime</literal> parameter with the current
                system time. This part of the code is to prepare the data to be sent. On a real
                invoker some calls to core modules (<filename>Kernel/System/*.pm</filename>) should be made here.
            </para>
            <para>
                If during any part of the <literal>PrepareRequest</literal> function the request need to be stop
                without generating and error an entry in the debug log the following code can be
                used:
            </para>
            <para>
                <programlisting><![CDATA[
# stop requester communication
return {
    Success           => 1,
    StopCommunication => 1,
};
                ]]></programlisting>
            </para>
            <para>
                Using this, the Requester will understand that the request should not continue
                (it will not be sent to Mapping layer and will also not be sent to the
                Network Transport). The Requester will not send an error on the debug log, it will only
                silently stop.
            </para>
            <para>
                <programlisting><![CDATA[
sub HandleResponse {
    my ( $Self, %Param ) = @_;

    # if there was an error in the response, forward it
    if ( !$Param{ResponseSuccess} ) {
        if ( !IsStringWithData( $Param{ResponseErrorMessage} ) ) {

            return $Self->{DebuggerObject}->Error(
                Summary => 'Got response error, but no response error message!',
            );
        }

        return {
            Success      => 0,
            ErrorMessage => $Param{ResponseErrorMessage},
        };
    }

    # we need a TicketNumber
    if ( !IsStringWithData( $Param{Data}->{TicketNumber} ) ) {

        return $Self->{DebuggerObject}->Error( Summary => 'Got no TicketNumber!' );
    }

    # prepare TicketNumber
    my %ReturnData = (
        TicketNumber => $Param{Data}->{TicketNumber},
    );

    # check Action
    if ( IsStringWithData( $Param{Data}->{Action} ) ) {
        if ( $Param{Data}->{Action} !~ m{ \A ( .*? ) Test \z }xms ) {

            return $Self->{DebuggerObject}->Error(
                Summary => 'Got Action but it is not in required format!',
            );
        }
        $ReturnData{Action} = $1;
    }

    return {
        Success => 1,
        Data    => \%ReturnData,
    };
}
                ]]></programlisting>
            </para>
            <para>
                The <literal>HandleResponse</literal> function is used to receive  and process the data from the
                previous request, that was made to the Remote System. This data already passed by
                Mapping layer, to transform it from Remote System format to OTRS format (if
                needed).
            </para>
            <para>
                For this particular example it checks the ticket number again and check if the
                action ends with the word 'Test' (as was done in the <literal>PrepareRequest</literal> function).
            </para>
            <note>
                <para>
                    This invoker is only used for tests, a real invoker will check if the response
                    was on the format described by the Remote System and can perform some actions
                    like: call another invoker, perform a call to a Core Module, update the database,
                    send an error, etc.
                </para>
            </note>
        </section>
        <section id="invoker-configuration">
            <title>Configuration Example</title>
            <para>
                There is the need to register this invoker module to be accessible in the OTRS GUI.
                This can be done using the XML configuration below.
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
<ConfigItem Name="GenericInterface::Invoker::Module###Test::Test" Required="0" Valid="1">
    <Description Translatable="1">GenericInterface module registration for the invoker layer.</Description>
    <Group>GenericInterface</Group>
    <SubGroup>GenericInterface::Invoker::ModuleRegistration</SubGroup>
    <Setting>
        <Hash>
            <Item Key="Name">Test</Item>
            <Item Key="Controller">Test</Item>
            <Item Key="ConfigDialog">AdminGenericInterfaceInvokerDefault</Item>
        </Hash>
    </Setting>
</ConfigItem>
                ]]></programlisting>
            </para>
        </section>
    </section>
</section>
