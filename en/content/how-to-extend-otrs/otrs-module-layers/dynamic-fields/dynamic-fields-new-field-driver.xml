<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="dynamic-fields-new-field-driver">
    <title>Dynamic Field Driver Example</title>
    <para>
        The driver <emphasis>is</emphasis> the Dynamic Field. It contains several functions that
        are used wide in the OTRS framework. A driver can inherit some functions form base classes,
        for example TextArea driver inherit most of the functions from Base.pm and BaseText.pm and
        it only implements the functions that requires different logic or results. Checkbox field
        driver only inherits from Base.pm as all other functions are very different from any other
        Base driver.
    </para>
    <note>
        <para>
            Please refer to the Perl On-line Documentation (POD) of the module
            /Kernel/System/DynmicField/Backend.pm to have the list of all attributes and possible
            return data for each function.
        </para>
    </note>
    <section id="dynamic-fields-new-field-driver-code">
        <title>Code Example:</title>
        <para>
            In this section the Password Dynamic Field driver is shown and explained. This driver
            inherits some functions from Base.pm and BaseText.pm and only implements the functions
            that needs different results.
         </para>
         <para>
            <programlisting><![CDATA[
# --
# Kernel/System/DynamicField/Driver/Password.pm - Driver for DynamicField Password backend
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::System::DynamicField::Driver::Password;

use strict;
use warnings;

use Kernel::System::VariableCheck qw(:all);
use Kernel::System::DynamicFieldValue;

use base qw(Kernel::System::DynamicField::Driver::BaseText);

our @ObjectDependencies = (
    'Kernel::Config',
    'Kernel::System::DynamicFieldValue',
    'Kernel::System::Main',
);
            ]]></programlisting>
        </para>
        <para>
            This is the common header that can be found in common OTRS modules. The class/package
            name is declared via the package keyword. Notice that BaseText is used as base class.
        </para>
        <para>
            <programlisting><![CDATA[
sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {};
    bless( $Self, $Type );

    # set field behaviors
    $Self->{Behaviors} = {
        'IsACLReducible'               => 0,
        'IsNotificationEventCondition' => 1,
        'IsSortable'                   => 0,
        'IsFiltrable'                  => 0,
        'IsStatsCondition'             => 1,
        'IsCustomerInterfaceCapable'   => 1,
    };

    # get the Dynamic Field Backend custom extensions
    my $DynamicFieldDriverExtensions
        = $Kernel::OM->Get('Kernel::Config')->Get('DynamicFields::Extension::Driver::Password');

    EXTENSION:
    for my $ExtensionKey ( sort keys %{$DynamicFieldDriverExtensions} ) {

        # skip invalid extensions
        next EXTENSION if !IsHashRefWithData( $DynamicFieldDriverExtensions->{$ExtensionKey} );

        # create a extension config shortcut
        my $Extension = $DynamicFieldDriverExtensions->{$ExtensionKey};

        # check if extension has a new module
        if ( $Extension->{Module} ) {

            # check if module can be loaded
            if (
                !$Kernel::OM->Get('Kernel::System::Main')->RequireBaseClass( $Extension->{Module} )
                )
            {
                die "Can't load dynamic fields backend module"
                    . " $Extension->{Module}! $@";
            }
        }

        # check if extension contains more behaviors
        if ( IsHashRefWithData( $Extension->{Behaviors} ) ) {

            %{ $Self->{Behaviors} } = (
                %{ $Self->{Behaviors} },
                %{ $Extension->{Behaviors} }
            );
        }
    }

    return $Self;
}
            ]]></programlisting>
        </para>
        <para>
            The constructor <emphasis>new</emphasis> creates a new instance of the class. According
            to the coding guidelines objects of other classes that are needed in this module should
            be created here.
        </para>
        <para>
            It is important to define the behaviors correctly as the field might or might not be
            used in certain screens, functions that depends on behaviors that are not active for
            this particular field might not be needed to be implemented.
        </para>
        <note>
            <para>
                Drivers are created only by the BankendObject and not directly from any other
                module.
            </para>
        </note>
    <para>
        <programlisting><![CDATA[
sub EditFieldRender {
    my ( $Self, %Param ) = @_;

    # take config from field config
    my $FieldConfig = $Param{DynamicFieldConfig}->{Config};
    my $FieldName   = 'DynamicField_' . $Param{DynamicFieldConfig}->{Name};
    my $FieldLabel  = $Param{DynamicFieldConfig}->{Label};

    my $Value = '';

    # set the field value or default
    if ( $Param{UseDefaultValue} ) {
        $Value = ( defined $FieldConfig->{DefaultValue} ? $FieldConfig->{DefaultValue} : '' );
    }
    $Value = $Param{Value} if defined $Param{Value};

    # extract the dynamic field value form the web request
    my $FieldValue = $Self->EditFieldValueGet(
        %Param,
    );

    # set values from ParamObject if present
    if ( defined $FieldValue ) {
        $Value = $FieldValue;
    }

    # check and set class if necessary
    my $FieldClass = 'DynamicFieldText W50pc';
    if ( defined $Param{Class} && $Param{Class} ne '' ) {
        $FieldClass .= ' ' . $Param{Class};
    }

    # set field as mandatory
    $FieldClass .= ' Validate_Required' if $Param{Mandatory};

    # set error css class
    $FieldClass .= ' ServerError' if $Param{ServerError};

    my $HTMLString = <<"EOF";
<input type="password" class="$FieldClass" id="$FieldName" name="$FieldName" title="$FieldLabel" value="$Value" />
EOF

    if ( $Param{Mandatory} ) {
        my $DivID = $FieldName . 'Error';

        # for client side validation
        $HTMLString .= <<"EOF";
    <div id="$DivID" class="TooltipErrorMessage">
        <p>
            \$Text{"This field is required."}
        </p>
    </div>
EOF
    }

    if ( $Param{ServerError} ) {

        my $ErrorMessage = $Param{ErrorMessage} || 'This field is required.';
        my $DivID = $FieldName . 'ServerError';

        # for server side validation
        $HTMLString .= <<"EOF";
    <div id="$DivID" class="TooltipErrorMessage">
        <p>
            \$Text{"$ErrorMessage"}
        </p>
    </div>
EOF
    }

    # call EditLabelRender on the common Driver
    my $LabelString = $Self->EditLabelRender(
        %Param,
        DynamicFieldConfig => $Param{DynamicFieldConfig},
        Mandatory          => $Param{Mandatory} || '0',
        FieldName          => $FieldName,
    );

    my $Data = {
        Field => $HTMLString,
        Label => $LabelString,
    };

    return $Data;
}
            ]]></programlisting>
        </para>
        <para>
            This function is the responsible to create the HTML representation of the field and its
            label, and is used in the edit screens like "AgentTicketPhone", "AgentTicketNote", etc
        </para>
        <para>
            <programlisting><![CDATA[
sub DisplayValueRender {
    my ( $Self, %Param ) = @_;

    # set HTMLOuput as default if not specified
    if ( !defined $Param{HTMLOutput} ) {
        $Param{HTMLOutput} = 1;
    }

    my $Value;
    my $Title;

    # check if field is set to show password or not
    if (
        defined $Param{DynamicFieldConfig}->{Config}->{ShowValue}
        && $Param{DynamicFieldConfig}->{Config}->{ShowValue} eq 'Yes'
        )
    {

        # get raw Title and Value strings from field value
        $Value = defined $Param{Value} ? $Param{Value} : '';
        $Title = $Value;
    }
    else {

        # show the mask and not the value
        $Value = $Param{DynamicFieldConfig}->{Config}->{ValueMask} || '';
        $Title = 'The value of this field is hidden.'
    }

    # HTMLOuput transformations
    if ( $Param{HTMLOutput} ) {
        $Value = $Param{LayoutObject}->Ascii2Html(
            Text => $Value,
            Max => $Param{ValueMaxChars} || '',
        );

        $Title = $Param{LayoutObject}->Ascii2Html(
            Text => $Title,
            Max => $Param{TitleMaxChars} || '',
        );
    }
    else {
        if ( $Param{ValueMaxChars} && length($Value) > $Param{ValueMaxChars} ) {
            $Value = substr( $Value, 0, $Param{ValueMaxChars} ) . '...';
        }
        if ( $Param{TitleMaxChars} && length($Title) > $Param{TitleMaxChars} ) {
            $Title = substr( $Title, 0, $Param{TitleMaxChars} ) . '...';
        }
    }

    # create return structure
    my $Data = {
        Value => $Value,
        Title => $Title,
    };

    return $Data;
}
            ]]></programlisting>
        </para>
        <para>
            <emphasis>DisplayValueRender()</emphasis> function returns the field value as a plain
            text as well as its title (both can be translated). for this particular example we are
            checking if the password should be reveled or display a predefined mask by  a
            configuration parameter in the Dynamic Field.
        </para>
        <para>
            <programlisting><![CDATA[
sub ReadableValueRender {
    my ( $Self, %Param ) = @_;

    my $Value;
    my $Title;

    # check if field is set to show password or not
    if (
        defined $Param{DynamicFieldConfig}->{Config}->{ShowValue}
        && $Param{DynamicFieldConfig}->{Config}->{ShowValue} eq 'Yes'
        )
    {

        # get raw Title and Value strings from field value
        $Value = $Param{Value} // '';
        $Title = $Value;
    }
    else {

        # show the mask and not the value
        $Value = $Param{DynamicFieldConfig}->{Config}->{ValueMask} || '';
        $Title = 'The value of this field is hidden.'
    }

    # cut strings if needed
    if ( $Param{ValueMaxChars} && length($Value) > $Param{ValueMaxChars} ) {
        $Value = substr( $Value, 0, $Param{ValueMaxChars} ) . '...';
    }
    if ( $Param{TitleMaxChars} && length($Title) > $Param{TitleMaxChars} ) {
        $Title = substr( $Title, 0, $Param{TitleMaxChars} ) . '...';
    }

    # create return structure
    my $Data = {
        Value => $Value,
        Title => $Title,
    };

    return $Data;
}
            ]]></programlisting>
        </para>
        <para>
            This function is similar to <emphasis>DisplayValueRender()</emphasis> but is used  in
            places where there is no LayoutObject.
        </para>
    </section>

    <section id="dynamic-fields-new-field-driver-other-functions">
        <title>Other Functions:</title>
        <para>
            The following are other functions that are might needed if the new Dynamic Field does
            not inherit from other classes, To see the complete code of this functions please take a
            look directly into the files Kernel::System::DynamicField::Driver::Base.pm and
            Kernel::System::DynamicField::Driver::BaseText.pm
        </para>
        <para>
            <programlisting><![CDATA[
sub ValueGet {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            This function retrieves the value from the field on a specified Object. In this case we
            are returning the first text value, since the field only stores one text value at time.
        </para>
        <para>
            <programlisting><![CDATA[
sub ValueSet {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            <emphasis>ValueSet()</emphasis> is used to store a Dynamic Field value, in this case
            this field only stores one text type value. Other fields could store more than one
            value on either ValueText, ValueDateTime, or ValueInt format.
        </para>
        <para>
            <programlisting><![CDATA[
sub ValueDelete {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            This function is used to delete one field value attached to a particular object ID, is
            used for example if the instance of object is to be deleted, then there is no reason to
            have the field value stored in the database for that particular object instance.
        </para>
        <para>
            <programlisting><![CDATA[
sub AllValuesDelete {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            <emphasis>AllValuesDelete()</emphasis> function is used to delete all values from a
            certain Dynamic Field. This function is very useful when a Dynamic Field is going to be
            deleted.
        </para>
        <para>
            <programlisting><![CDATA[
sub ValueValidate {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            The <emphasis>ValueValidate()</emphasis> function is used to check if the value is
            consistent to its type.
        </para>
        <para>
            <programlisting><![CDATA[
sub SearchSQLGet {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            This function is used by TicketSearch core module to build the internal query to search
            for a ticket based on this field as a search parameter.
        </para>
        <para>
            <programlisting><![CDATA[
sub SearchSQLOrderFieldGet {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            The <emphasis>SearchSQLOrderFieldGet</emphasis> is also a helper for TicketSearch
            module, "$Param{TableAlias}." should be kept and "value_text" could be replaced with
            "value_date" or "value_int" depending on the field.
        </para>
        <para>
            <programlisting><![CDATA[
sub EditFieldValueGet {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            <emphasis>EditFieldValueGet()</emphasis> is a function used in the edit screens of OTRS
            and its purpose is to get the value of the field, either form a template like generic
            agent profile or from a web request. This function gets the web request in the
            $Param{ParamObject}, that is a copy of the ParamObject of the Frontend Module or screen.
        </para>
        <para>
            There are two return formats for this function, the normal: that is just the raw value
            or a structure: that is the pair field name => field value. for example a Date Dynamic
            Field returns normally the date as string, and if it should return the an structure it
            returns a pair for each part of the the date in the hash.
        </para>
        <para>
            The if the result should be a structure then, normally this is used to store its values
            in a template, like a generic agent profile. For example a date field uses several HTML
            components to build the field, like the "Used" check-box and selects for year, month,
            day etc.
        </para>
        <para>
            <programlisting><![CDATA[
sub EditFieldValueValidate {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            This function should provide at least, a method to validate if the field is empty, and
            return an error if the field is empty and mandatory, but it can also do more validations
            for other kind of fields, like if the option selected is valid, or if a date should be
            only in the past etc. It can provide a custom error message also.
        </para>
        <para>
            <programlisting><![CDATA[
sub SearchFieldRender {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            This function is used by ticket search dialog and its similar to
            <emphasis>EditFieldRander()</emphasis>, but normally on a search screen small changes
            has to be done for all fields, for this example we use a HTML text input instead of a
            password input. In other fields like Dropdown field is displayed as a Multiple select in
            order to let the user search for more than one value at a time.
        </para>
        <para>
            <programlisting><![CDATA[
sub SearchFieldValueGet {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            Very similar to <emphasis>EditFieldValueGet()</emphasis>, but uses a different name
            prefix, adapted for the search dialog screen.
        </para>
        <para>
            <programlisting><![CDATA[
sub SearchFieldParameterBuild {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            <emphasis>SearchFieldParameterBuild()</emphasis> is used also by the ticket search
            dialog to set the correct operator and value to do the search on this field. It also
            returns how the value should be displayed in the used search attributes, in the results
            page.
        </para>
        <para>
            <programlisting><![CDATA[
sub StatsFieldParameterBuild {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            This function is used by the stats modules, it includes the field definition in the
            stats format. For fields with fixed values it also includes all this possible values
            and if they can be translated, take a look to the BaseSelect driver code for an example
            how to implement those.
        </para>
        <para>
            <programlisting><![CDATA[
sub StatsSearchFieldParameterBuild {
 .
 .
 .
 }
            ]]></programlisting>
        </para>
        <para>
            <emphasis>StatsSearchFieldParameterBuild()</emphasis> is very similar to the
            <emphasis>SearchFieldParameterBuild()</emphasis>, the difference id that the
            <emphasis>SearchFieldParameterBuild()</emphasis> gets the value from the search profile
            and this one gets the value directly from its parameters.
        </para>
        <para>
            This function is used by statistics module.
        </para>
        <para>
            <programlisting><![CDATA[
sub TemplateValueTypeGet {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            The <emphasis>TemplateValueTypeGet()</emphasis> function is used to know how the
            Dynamic Field values stored on a profile should be retrieved, as an SCALAR or as an
            ARRAY, and it also defines the correct name of the field in the profile.
        </para>
        <para>
            <programlisting><![CDATA[
sub RandomValueSet {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            This function is used by otrs.FillDB.pl script to populate the database with some test
            and random data. The value inserted by this function is not really relevant. The only
            restriction is that the value must be compatible with the field value type.
        </para>
        <para>
            <programlisting><![CDATA[
sub ObjectMatch {
.
.
.
}
            ]]></programlisting>
        </para>
        <para>
            Used by the notification modules this function returns 1 if the field is present in the
            $Param{ObjectAttributes} parameter and if it match the given value.
        </para>
    </section>
</section>
