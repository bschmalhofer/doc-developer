<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="dynamic-fields-extend-field-backend">
    <title>Dynamic Field Backend Extension Example</title>
    <para>
        Backend extensions will be loaded transparently into the Backend itself as a base class. All
        defined object and properties from the Backend will be accessible in the extension.
    </para>
    <note>
        <para>
            All new functions defined in the Backend extension should be implemented in a Driver
            extension.
        </para>
    </note>
    <section id="dynamic-fields-extend-field-backend-code">
        <title>Code Example:</title>
        <para>
            In this section the <literal>Foo</literal> extension for Backend is shown and explained. The
            extension only defines the function <code>Foo()</code>.
         </para>
         <para>
            <programlisting><![CDATA[
# --
# Kernel/System/DynamicField/FooExtensionBackend.pm - Extension for DynamicField backend
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::System::DynamicField::FooExtensionBackend;

use strict;
use warnings;

use Kernel::System::VariableCheck qw(:all);

=head1 NAME

Kernel::System::DynamicField::FooExtensionBackend

=head1 SYNOPSIS

DynamicFields Extension for Backend

=head1 PUBLIC INTERFACE

=over 4

=cut
            ]]></programlisting>
        </para>
        <para>
            This is common header that can be found in common OTRS modules. The class/package
            name is declared via the <literal>package</literal> keyword.
        </para>
        <para>
            <programlisting><![CDATA[
=item Foo()

Testing function: returns 1 if function is available on a Dynamic Field driver.

    my $Success = $BackendObject->Foo(
        DynamicFieldConfig   => $DynamicFieldConfig,      # complete config of the DynamicField
    );

Returns:
    $Success = 1;       # or undef

=cut

sub Foo {
    my ( $Self, %Param ) = @_;

    # check needed stuff
    for my $Needed (qw(DynamicFieldConfig)) {
        if ( !$Param{$Needed} ) {
            $Kernel::OM->Get('Kernel::System::Log')->Log(
                Priority => 'error',
                Message  => "Need $Needed!",
            );

            return;
        }
    }

    # check DynamicFieldConfig (general)
    if ( !IsHashRefWithData( $Param{DynamicFieldConfig} ) ) {
        $Kernel::OM->Get('Kernel::System::Log')->Log(
            Priority => 'error',
            Message  => "The field configuration is invalid",
        );

        return;
    }

    # check DynamicFieldConfig (internally)
    for my $Needed (qw(ID FieldType ObjectType)) {
        if ( !$Param{DynamicFieldConfig}->{$Needed} ) {
            $Kernel::OM->Get('Kernel::System::Log')->Log(
                Priority => 'error',
                Message  => "Need $Needed in DynamicFieldConfig!",
            );

            return;
        }
    }

    # set the dynamic field specific backend
    my $DynamicFieldBackend = 'DynamicField' . $Param{DynamicFieldConfig}->{FieldType} . 'Object';

    if ( !$Self->{$DynamicFieldBackend} ) {
        $Kernel::OM->Get('Kernel::System::Log')->Log(
            Priority => 'error',
            Message  => "Backend $Param{DynamicFieldConfig}->{FieldType} is invalid!",
        );

        return;
    }

    # verify if function is available
    return if !$Self->{$DynamicFieldBackend}->can('Foo');

    # call HasBehavior on the specific backend
    return $Self->{$DynamicFieldBackend}->Foo(%Param);
}
            ]]></programlisting>
        </para>
        <para>
            The function <code>Foo()</code> is only used for test purposes. First it checks
            the Dynamic Field configuration, then it checks if the Dynamic Field Driver (type)
            exists and was already loaded. To prevent the function call on a driver where is not
            defined it first check if the driver can execute the function, then executes the
            function in the driver passing all parameters.
        </para>
        <note>
            <para>
                It is also possible to skip the step that tests if the Driver can execute the
                function. To do that it is necessary to implement a mechanism in the Frontend module
                to require a special behavior on the Dynamic Field, and only after call the function
                in the Backend object.
            </para>
        </note>
    </section>
</section>
