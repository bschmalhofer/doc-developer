<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="otrs-module-layers">
    <title>Using the power of the OTRS module layers</title>
    <para>
        OTRS has a large number of so-called "module layers" which make it very easy to extend
        the system without patching existing code. One example is the number generation mechanism
        for tickets. It is a "module layer" with
        <link linkend="ticketnumber-generator">pluggable modules</link>, and you can add
        your own custom number generator modules if you wish to do so.
        Let's look at the different layers in detail!
    </para>

    <section id="authentication-user-management-modules">
        <title>Authentication and user management</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/agent-auth.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/auth-sync.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/customer-auth.xml" />
    </section>

    <section id="preferences-modules">
        <title>Preferences</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/customer-user-preferences.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/queue-preferences.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/service-preferences.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/sla-preferences.xml" />
    </section>

    <section id="core-modules">
        <title>Other core functions</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/log.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/outputfilter.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/stats.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/ticketnumber-generator.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/ticketevent.xml" />
    </section>

    <section id="frontend-modules">
        <title>Frontend Modules</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/dashboard.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/notify.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/ticket-menu.xml" />
    </section>

    <section id="genericinterface-modules">
        <title>Generic Interface Modules</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/gi-transport.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/gi-mapping.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/gi-invoker.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/gi-operation.xml" />
    </section>

    <section id="scheduler-taskhandler-modules">
        <title>Scheduler Task Handler Modules</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/scheduler-task-handler.xml" />
    </section>

    <section id="dynamicfields-modules">
        <title>Dynamic Fields</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/dynamic-fields/dynamic-fields-overview.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/dynamic-fields/dynamic-fields-framework.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/dynamic-fields/dynamic-fields-interaction.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/dynamic-fields/dynamic-fields-extend-options.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/dynamic-fields/dynamic-fields-new-field.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="otrs-module-layers/dynamic-fields/dynamic-fields-extend.xml" />
    </section>

    <section id="old-module-description">
        <title>Old Module Descriptions</title>
        <para>Please remove these old sections if newer ones were created.</para>
    <section id="module-navigation">
        <title>Navigation Module</title>
        <para>
In this module layer you can create dynamic navigation bar items with
dynamic content (Name and Description). Navigation Module are located under Kernel/Output/HTML/NavBar*.pm.
        </para>
        <para>
Format:
        <programlisting><![CDATA[
# --
# Kernel/Output/HTML/NavBarABC.pm - shows a navbar item dynamicaly
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::Output::HTML::NavBarABC;

use strict;
use warnings;

# --
sub new {
    my ( $Type, %Param ) = @_;
    [...]
    return $Self;
}
# --
sub Run {
    my ( $Self, %Param ) = @_;
    my %Return = ();
    $Return{'0999989'} = {
        Block       => 'ItemPersonal',
        Description => 'Some Desctipton',
        Name        => 'Text',
        Image       => 'new-message.png',
        Link        => 'Action=AgentMailbox&amp;Subaction=New',
        AccessKey   => 'j',
    };
    return %Return;
}
# --
1;
        ]]></programlisting>
        </para>
        <para>
To use this module add the following code to the Kernel/Config.pm and restart
your webserver (if you use mod_perl).
        <programlisting><![CDATA[
[Kernel/Config.pm]
# agent interface notification module
$Self->{'Frontend::NavBarModule'}->{'99-ABC'} = {
    Module => 'Kernel::Output::HTML::NavBarABC',
};
        ]]></programlisting>
        </para>
    </section>

    <section id="module-customer-navigation">
        <title>Customer Navigation Module</title>
        <para>
In this module layer you can create dynamic navigation bar items with
dynamic content (Name and Description).
        </para>
        <para>
The format is the same as in the Navigation Module.
        </para>
        <para>
Just the config setting key is different. To use this module, add the following
to the Kernel/Config.pm and restart your webserver (if you use mod_perl).
        </para>
        <para>
        <programlisting><![CDATA[
[Kernel/Config.pm]
# customer notifiacation module
$Self->{'CustomerFrontend::NavBarModule'}->{'99-ABC'} = {
    Module => 'Kernel::Output::HTML::NavBarABC',
};
        ]]></programlisting>
        </para>
    </section>
        <section id="ticket-postmaster-module">
            <title>Ticket PostMaster Module</title>
            <para>
PostMaster modules are used during the PostMaster process.
There are two kinds of PostMaster modules. PostMasterPre (used after parsing an email)
and PostMasterPost (used after an email is processed and in the database) modules.
            </para>
            <para>
If you want to create your own postmaster filter, just create your own module.
These modules are located under "Kernel/System/PostMaster/Filter/*.pm".
For default modules see the admin manual. You just need two functions:
new() and Run():
            </para>
            <para>
The following is an examplary module to match emails and set X-OTRS-Headers
(see doc/X-OTRS-Headers.txt for more info).
            </para>
            <para>
Kernel/Config.pm:
            </para>
            <para>
            <programlisting><![CDATA[
# Job Name: 1-Match
# (block/ignore all spam email with From: noreply@)
$Self->{'PostMaster::PreFilterModule'}->{'1-Example'} = {
    Module => 'Kernel::System::PostMaster::Filter::Example',
    Match => {
        From => 'noreply@',
    },
    Set => {
        'X-OTRS-Ignore' => 'yes',
    },
};
            ]]></programlisting>
            </para>
            <para>
Format:
            </para>
            <para>
            <programlisting><![CDATA[
# --
# Kernel/System/PostMaster/Filter/Example.pm - a postmaster filter
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::System::PostMaster::Filter::Example;

use strict;
use warnings;

use vars qw(@ISA $VERSION);

sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {};
    bless ($Self, $Type);

    $Self->{Debug} = $Param{Debug} || 0;

    # get needed objects
    for (qw(ConfigObject EncodeObject LogObject DBObject)) {
        $Self->{$_} = $Param{$_} || die "Got no $_!";
    }

    return $Self;
}

sub Run {
    my ( $Self, %Param ) = @_;
    # get config options
    my %Config = ();
    my %Match = ();
    my %Set = ();
    if ($Param{JobConfig} &amp;&amp; ref($Param{JobConfig}) eq 'HASH') {
        %Config = %{$Param{JobConfig}};
        if ($Config{Match}) {
            %Match = %{$Config{Match}};
        }
        if ($Config{Set}) {
            %Set = %{$Config{Set}};
        }
    }
    # match 'Match => ???' stuff
    my $Matched = '';
    my $MatchedNot = 0;
    for (sort keys %Match) {
        if ($Param{GetParam}->{$_} &amp;&amp; $Param{GetParam}->{$_} =~ /$Match{$_}/i) {
            $Matched = $1 || '1';
            if ($Self->{Debug} > 1) {
                $Self->{LogObject}->Log(
                    Priority => 'debug',
                    Message => "'$Param{GetParam}->{$_}' =~ /$Match{$_}/i matched!",
                );
            }
        }
        else {
            $MatchedNot = 1;
            if ($Self->{Debug} > 1) {
                $Self->{LogObject}->Log(
                    Priority => 'debug',
                    Message => "'$Param{GetParam}->{$_}' =~ /$Match{$_}/i matched NOT!",
                );
            }
        }
    }
    # should I ignore the incoming mail?
    if ($Matched &amp;&amp; !$MatchedNot) {
        for (keys %Set) {
            if ($Set{$_} =~ /\[\*\*\*\]/i) {
                $Set{$_} = $Matched;
            }
            $Param{GetParam}->{$_} = $Set{$_};
            $Self->{LogObject}->Log(
                Priority => 'notice',
                Message => "Set param '$_' to '$Set{$_}' (Message-ID: $Param{GetParam}->{'Message-ID'}) ",
            );
        }
    }

    return 1;
}

1;
            ]]></programlisting>
            </para>
            <para>
The following image shows you the email processing flow.
            <screenshot>
            <graphic fileref="screenshots/email-processing.png" scalefit="1" width="100%" contentdepth="100%"></graphic>
            </screenshot>
            </para>
        </section>
        <section id="ticket-module-menu">
            <title>Ticket Menu Module</title>
            <para>
To add links in the ticket menu, just use ticket menu modules.
            </para>
            <para>
If you want to create your own ticket menu link, just create your own module.
These modules are located under "Kernel/Output/HTML/TicketMenu*.pm".
For default modules see the admin manual. You just need two functions:
new() and Run():
            </para>
            <para>
The following example shows you how to show a lock or a unlock ticket link.
            </para>
            <para>
Kernel/Config.pm:
            </para>
            <para>
            <programlisting><![CDATA[
# for ticket zoom menu
$Self->{'Ticket::Frontend::MenuModule'}->{'100-Lock'} =  {
    Action => 'AgentTicketLock',
    Module => 'Kernel::Output::HTML::TicketMenuLock',
    Name   => 'Lock'
};

# for ticket preview menu
$Self->{'Ticket::Frontend::PreMenuModule'}->{'100-Lock'} =  {
    Action => 'AgentTicketLock',
    Module => 'Kernel::Output::HTML::TicketMenuLock',
    Name   => 'Lock'
};
            ]]></programlisting>
            </para>
            <para>
Format:
            </para>
            <para>
            <programlisting><![CDATA[
# --
# Kernel/Output/HTML/TicketMenuLock.pm
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::Output::HTML::TicketMenuLock;

use strict;
use warnings;

use vars qw(@ISA $VERSION);

# --
sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {};
    bless ($Self, $Type);

    # get needed objects
    for (qw(ConfigObject LogObject DBObject LayoutObject UserID TicketObject)) {
        $Self->{$_} = $Param{$_} || die "Got no $_!";
    }

    return $Self;
}
# --
sub Run {
    my ( $Self, %Param ) = @_;
    # check needed stuff
    if (!$Param{Ticket}) {
        $Self->{LogObject}->Log(Priority => 'error', Message => 'Need Ticket!');
        return;
    }

    # check permission
    if ($Self->{TicketObject}->LockIsTicketLocked(TicketID => $Param{TicketID})) {
        my $AccessOk = $Self->{TicketObject}->OwnerCheck(
            TicketID => $Param{TicketID},
            OwnerID => $Self->{UserID},
        );
        if (!$AccessOk) {
            return $Param{Counter};
        }
    }

    $Self->{LayoutObject}->Block(
        Name => 'Menu',
        Data => { },
    );
    if ($Param{Counter}) {
        $Self->{LayoutObject}->Block(
            Name => 'MenuItemSplit',
            Data => {  },
        );
    }
    if ($Param{Ticket}->{Lock} eq 'lock') {
        $Self->{LayoutObject}->Block(
            Name => 'MenuItem',
            Data => {
                %{$Param{Config}},
                %{$Param{Ticket}},
                %Param,
                Name => 'Unlock',
                Description => 'Unlock to give it back to the queue!',
                Link => 'Action=AgentTicketLock&amp;Subaction=Unlock&amp;TicketID=$QData{"TicketID"}',
            },
        );
    }
    else {
        $Self->{LayoutObject}->Block(
            Name => 'MenuItem',
            Data => {
                %{$Param{Config}},
                %Param,
                Name => 'Lock',
                Description => 'Lock it to work on it!',
                Link => 'Action=AgentTicketLock&amp;Subaction=Lock&amp;TicketID=$QData{"TicketID"}',
            },
        );
    }
    $Param{Counter}++;
    return $Param{Counter};
}
# --
1;
            ]]></programlisting>
            </para>
        </section>
    </section>
</section>
