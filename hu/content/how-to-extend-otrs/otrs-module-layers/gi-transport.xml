<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="transport">
    <title>Hálózati átvitel</title>
    <para>
        A hálózati átvitelt használják az információk küldésének és fogadásának
módszereként az OTRS és egy távoli rendszer között. Az általános felület
beállításai lehetővé teszik egy webszolgáltatásnak, hogy különböző hálózati
átviteli modulokat használjon a szolgáltatónál és a kérelmezőnél, de a
leggyakoribb forgatókönyv az, hogy ugyanazt az átviteli modult használják
mindkettőnél.
    </para>
    <para>
        <emphasis>OTRS mint szolgáltató:</emphasis>
    </para>
    <para>
        Az OTRS arra használja a hálózati átviteli modulokat, hogy lekérje az
adatokat a távoli rendszertől, valamint lekérje a végrehajtandó
műveleteket. A művelet végrehajtása után az OTRS ismét azokat használja a
válasz visszaküldéséhez a távoli rendszernek.
    </para>
    <para>
        <emphasis>OTRS mint kérelmező:</emphasis>
    </para>
    <para>
        Az OTRS arra használja a hálózati átviteli modulokat, hogy kérelmeket
küldjön a távoli rendszernek egy távoli művelet végrehajtásához a szükséges
adatok mellett. Az OTRS várakozik a távoli rendszer válaszára, és
visszaküldi azt a kérelmező modulnak.
    </para>
    <para>
        Mindkét irányban a hálózati átviteli modulok foglalkoznak a távoli rendszer
formátumában lévő adatokkal. Nem ajánlott semmilyen adatátalakítás
végrehajtása sem ezekben a modulokban, mivel a leképező réteg felelős a
kommunikáció során szükséges bármilyen adatátalakítás végrehajtásáért. Egy
kivétel erre az olyan adatátalakítás, amely kifejezetten az átvitelnél
szükséges, például XML vagy JSON és Perl átalakítások.
    </para>
    <section id="adding_transport">
        <title>Átviteli háttérprogram</title>
        <para>
            Ezután be fogjuk mutatni, hogy hogyan kell egy új átviteli háttérprogramot
kifejleszteni. Minden egyes átviteli háttérprogramnak meg kell valósítania
ezeket a szubrutinokat:
        </para>
        <para>
            <itemizedlist mark="round">
                <listitem>
                    <para><literal>new</literal></para>
                </listitem>
                <listitem>
                    <para><literal>ProviderProcessRequest</literal></para>
                </listitem>
                <listitem>
                    <para><literal>ProviderGenerateResponse</literal></para>
                </listitem>
                <listitem>
                    <para><literal>RequesterPerformRequest</literal></para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Meg kell valósítanunk ezen metódusok mindegyikét azért, hogy képesek legyünk
mindkét irányban helyesen kommunikálni egy távoli rendszerrel. Az összes
átviteli háttérprogramot az átviteli modul kezeli
(<filename>Kernel/GenericInterface/Transport.pm</filename>).
        </para>
        <para>
            Jelenleg az általános felület megvalósítja a HTTP SOAP és a HTTP REST
átviteleket. Ha a tervezett webszolgáltatás használhat HTTP SOAP vagy HTTP
SOAP átviteleket, akkor nincs szükség egy új hálózati átviteli modul
létrehozására, hanem ahelyett azt ajánljuk, hogy vessen egy pillantást a
HTTP SOAP vagy HTTP REST konfigurációira a beállításaik ellenőrzéséhez,
valamint hogy hogyan hangolhatók a távoli rendszernek megfelelően.
        </para>
        <section id="transport_code_example">
            <title>Kódpélda</title>
            <para>
                Abban az esetben, ha a biztosított hálózati átvitelek nem illeszkednek a
webszolgáltatás igényeire, akkor ebben a szakaszban egy minta hálózati
átviteli modul van bemutatva, és minden egyes szubrutin elmagyarázásra
kerül. Normális esetben az átviteli modulok CPAN modulokat használnak
háttérprogramokként. Például a HTTP SOAP átviteli modulok a
<literal>SOAP::Lite</literal> modult használják háttérprogramként.
            </para>
            <para>
                Ennél a példánál egy egyéni csomagot használnak az adatok visszaadásához
anélkül, hogy valódi hálózati kérést intéznének egy távoli rendszerhez,
ehelyett ez az egyéni modul működik visszacsatolási felületként.
            </para>
            <para>
                <programlisting><![CDATA[
# --
# Kernel/GenericInterface/Transport/HTTP/Test.pm - GenericInterface network transport interface for testing
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::GenericInterface::Transport::HTTP::Test;

use strict;
use warnings;

use HTTP::Request::Common;
use LWP::UserAgent;
use LWP::Protocol;

# prevent 'Used once' warning for Kernel::OM
use Kernel::System::ObjectManager;

our $ObjectManagerDisabled = 1;
                ]]></programlisting>
            </para>
            <para>
                Ez egy gyakori fejléc, amely megtalálható a szokásos OTRS modulokban. Az
osztály/csomag neve a <literal>package</literal> kulcsszón keresztül van
deklarálva. Az átvitelek nem példányosíthatók az objektumkezelővel.
            </para>

            <para>
                <programlisting><![CDATA[
sub new {
    my ( $Type, %Param ) = @_;

    my $Self = {};
    bless( $Self, $Type );

    for my $Needed (qw( DebuggerObject TransportConfig)) {
        $Self->{$Needed} = $Param{$Needed} || return {
            Success      => 0,
            ErrorMessage => "Nincs $Needed!"
        };
    }

    return $Self;
}

                ]]></programlisting>
            </para>
            <para>
                A <literal>new</literal> konstruktor hozza létre az osztály új példányát. A
kódolási irányelvek szerint az objektumkezelő által nem kezelt más
osztályoknak csak azon objektumait kell a <literal>new</literal>
konstruktorban létrehozni, amelyek ebben a modulban szükségesek.
            </para>
            <para>
                <programlisting><![CDATA[
sub ProviderProcessRequest {
    my ( $Self, %Param ) = @_;

    if ( $Self->{TransportConfig}->{Config}->{Fail} ) {

        return {
            Success      => 0,
            ErrorMessage => "HTTP állapotkód: 500",
            Data         => {},
        };
    }

    my $ParamObject = $Kernel::OM->Get('Kernel::System::Web::Request');

    my %Result;
    for my $ParamName ( $ParamObject->GetParamNames() ) {
        $Result{$ParamName} = $ParamObject->GetParam( Param => $ParamName );
    }

    # különleges kezelés az üres POST kérésnél
    if ( scalar keys %Result == 1 && exists $Result{POSTDATA} && !$Result{POSTDATA} ) {
        %Result = ();
    }

    if ( !%Result ) {

        return $Self->{DebuggerObject}->Error(
            Summary => 'Nem található kért adat.',
        );
    }

    return {
        Success   => 1,
        Data      => \%Result,
        Operation => 'test_operation',
    };
}
                ]]></programlisting>
            </para>
            <para>
                A <literal>ProviderProcessRequest</literal> függvény megkapja a kérést a
távoli kiszolgálótól (ebben az esetben ugyanaz az OTRS), és kibontja az
adatokat és a műveletet a kérésből a végrehajtáshoz. Ennél a példánál a
művelet mindig a <literal>test_operation</literal>.
            </para>
            <para>
                Annak a módja, ahogy ez a függvény feldolgozza a kérést az adatok és a
művelet nevének lekéréséhez, az teljes egészében a megvalósítandó
protokolltól és azon külső moduloktól függ, amelyekhez használják azokat.
            </para>
            <para>
                <programlisting><![CDATA[
sub ProviderGenerateResponse {
    my ( $Self, %Param ) = @_;

    if ( $Self->{TransportConfig}->{Config}->{Fail} ) {

        return {
            Success      => 0,
            ErrorMessage => 'A tesztválasz előállítása sikertelen.',
        };
    }

    my $Response;

    if ( !$Param{Success} ) {
        $Response
            = HTTP::Response->new( 500 => ( $Param{ErrorMessage} || 'Internal Server Error' ) );
        $Response->protocol('HTTP/1.0');
        $Response->content_type("text/plain; charset=UTF-8");
        $Response->date(time);
    }
    else {

        # egy kérésszöveg előállítása az adatokból
        my $Request
            = HTTP::Request::Common::POST( 'http://testhost.local/', Content => $Param{Data} );

        $Response = HTTP::Response->new( 200 => "OK" );
        $Response->protocol('HTTP/1.0');
        $Response->content_type("text/plain; charset=UTF-8");
        $Response->add_content_utf8( $Request->content() );
        $Response->date(time);
    }

    $Self->{DebuggerObject}->Debug(
        Summary => 'HTTP-válasz küldése',
        Data    => $Response->as_string(),
    );

    # a válasz elküldése a kliensnek most
    print STDOUT $Response->as_string();

    return {
        Success => 1,
    };
}
                ]]></programlisting>
            </para>
            <para>
                Ez a függvény visszaküldi a választ a távoli rendszernek a kért művelethez.
            </para>
            <para>
                Ennél a bizonyos példánál minden esetben egy szabványos sikeres HTTP-választ
adunk vissza (200) vagy nem (500) a szükséges adatok mellett.
            </para>
            <para>
                <programlisting><![CDATA[
sub RequesterPerformRequest {
    my ( $Self, %Param ) = @_;

    if ( $Self->{TransportConfig}->{Config}->{Fail} ) {

        return {
            Success      => 0,
            ErrorMessage => "HTTP állapotkód: 500",
            Data         => {},
        };
    }

    # egyéni protokollkezelő használata a valódi hálózati kérések kiküldésének elkerüléséhez
    LWP::Protocol::implementor(
        testhttp => 'Kernel::GenericInterface::Transport::HTTP::Test::CustomHTTPProtocol'
    );
    my $UserAgent = LWP::UserAgent->new();
    my $Response = $UserAgent->post( 'testhttp://localhost.local/', Content => $Param{Data} );

    return {
        Success => 1,
        Data    => {
            ResponseContent => $Response->content(),
        },
    };
}
                ]]></programlisting>
            </para>
            <para>
                Ez az egyetlen olyan függvény, amelyet az OTRS mint kérelmező
használ. Elküldi a kérést a távoli rendszernek, és várakozik annak
válaszára.
            </para>
            <para>
                Ennél a példánál egy egyéni protokollkezelőt használunk a valódi hálózatra
történő kérésküldés elkerüléséhez. Ez az egyéni protokoll az alábbiakban van
megadva.
            </para>
           <para>
                <programlisting><![CDATA[
package Kernel::GenericInterface::Transport::HTTP::Test::CustomHTTPProtocol;

use base qw(LWP::Protocol);

sub new {
    my $Class = shift;

    return $Class->SUPER::new(@_);
}

sub request {    ## nem kritikus
    my $Self = shift;

    my ( $Request, $Proxy, $Arg, $Size, $Timeout ) = @_;

    my $Response = HTTP::Response->new( 200 => "OK" );
    $Response->protocol('HTTP/1.0');
    $Response->content_type("text/plain; charset=UTF-8");
    $Response->add_content_utf8( $Request->content() );
    $Response->date(time);

    #print $Request->as_string();
    #print $Response->as_string();

    return $Response;
}

                ]]></programlisting>
            </para>
            <para>
                Ez a kód ahhoz az egyéni protokollhoz van, amelyet használunk. Ez a
megközelítés csak gyakorlásnál vagy olyan tesztelési környezeteknél hasznos,
ahol a távoli rendszerek nem érhetők el.
            </para>
            <para>
                Egy új modul kifejlesztéséhez nem ajánljuk ezen megközelítés használatát,
egy valódi protokollt kell megvalósítani.
            </para>
        </section>
        <section id="transport-configuration">
            <title>Beállítási példa</title>
            <para>
                Szükség van ezen hálózati átviteli modul regisztrálására, hogy elérhető
legyen az OTRS grafikus felhasználói felületén. Ezt a lenti XML beállítás
használatával lehet megtenni.
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
<ConfigItem Name="GenericInterface::Transport::Module###HTTP::Test" Required="0" Valid="1">
    <Description Translatable="1">GenericInterface module registration for the transport layer.</Description>
    <Group>GenericInterface</Group>
    <SubGroup>GenericInterface::Transport::ModuleRegistration</SubGroup>
    <Setting>
        <Hash>
            <Item Key="Name">Test</Item>
            <Item Key="Protocol">HTTP</Item>
            <Item Key="ConfigDialog">AdminGenericInterfaceTransportHTTPTest</Item>
        </Hash>
    </Setting>
</ConfigItem>
                ]]></programlisting>
            </para>
        </section>
    </section>
</section>
