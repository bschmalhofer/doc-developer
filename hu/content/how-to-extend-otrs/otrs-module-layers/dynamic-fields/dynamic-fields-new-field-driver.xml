<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="dynamic-fields-new-field-driver">
    <title>Dinamikus mező illesztőprogram példa</title>
    <para>
        Az illesztőprogram <emphasis>maga a</emphasis> dinamikus mező. Számos olyan
függvényt tartalmaz, amelyet széles körben használnak az OTRS
keretrendszerben. Egy illesztőprogram örökölhet néhány függvényt az
alaposztályokból, például a <literal>TextArea</literal> illesztőprogram a
<filename>Base.pm</filename> és a <filename>BaseText.pm</filename> fájlokból
örökli a függvények legnagyobb részét, és csak azokat a függvényeket
valósítja meg, amelyek eltérő logikát vagy eredményeket igényelnek. A
jelölőnégyzet mező illesztőprogram csak a <filename>Base.pm</filename>
fájlból örököl, mivel az összes többi függvény nagyon eltérő bármely más
alap illesztőprogramtól.
    </para>
    <note>
        <para>
            Nézze meg a <filename>/Kernel/System/DynmicField/Backend.pm</filename> modul
Perl On-line Dokumentációját (POD) az összes attribútum listája és a
lehetséges visszatérési adatok megismeréséhez az egyes függvényeknél.
        </para>
    </note>
    <section id="dynamic-fields-new-field-driver-code">
        <title>Kódpélda:</title>
        <para>
            Ebben a szakaszban a jelszó dinamikus mező illesztőprogram van bemutatva és
elmagyarázva. Ez az illesztőprogram örököl néhány függvényt a
<filename>Base.pm</filename> és a <filename>BaseText.pm</filename>
fájlokból, és csak azokat a függvényeket valósítja meg, amelyek eltérő
eredményeket igényelnek.
         </para>
         <para>
            <programlisting><![CDATA[
# --
# Kernel/System/DynamicField/Driver/Password.pm - Driver for DynamicField Password backend
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::System::DynamicField::Driver::Password;

use strict;
use warnings;

use Kernel::System::VariableCheck qw(:all);
use Kernel::System::DynamicFieldValue;

use base qw(Kernel::System::DynamicField::Driver::BaseText);

our @ObjectDependencies = (
    'Kernel::Config',
    'Kernel::System::DynamicFieldValue',
    'Kernel::System::Main',
);
            ]]></programlisting>
        </para>
        <para>
            Ez egy gyakori fejléc, amely megtalálható a szokásos OTRS modulokban. Az
osztály/csomag neve a <literal>package</literal> kulcsszón keresztül van
deklarálva. Figyelje meg, hogy a <literal>BaseText</literal> osztályt
használják alaposztályként.
        </para>
        <para>
            <programlisting><![CDATA[
sub new {
    my ( $Type, %Param ) = @_;

    # új kivonat lefoglalása az objektumhoz
    my $Self = {};
    bless( $Self, $Type );

    # mezőviselkedések beállítása
    $Self->{Behaviors} = {
        'IsACLReducible'               => 0,
        'IsNotificationEventCondition' => 1,
        'IsSortable'                   => 0,
        'IsFiltrable'                  => 0,
        'IsStatsCondition'             => 1,
        'IsCustomerInterfaceCapable'   => 1,
    };

    # a dinamikus mező háttérprogram egyéni kiterjesztéseinek lekérése
    my $DynamicFieldDriverExtensions
        = $Kernel::OM->Get('Kernel::Config')->Get('DynamicFields::Extension::Driver::Password');

    EXTENSION:
    for my $ExtensionKey ( sort keys %{$DynamicFieldDriverExtensions} ) {

        # érvénytelen kiterjesztések kihagyása
        next EXTENSION if !IsHashRefWithData( $DynamicFieldDriverExtensions->{$ExtensionKey} );

        # egy kiterjesztés beállítás gyors elérésének létrehozása
        my $Extension = $DynamicFieldDriverExtensions->{$ExtensionKey};

        # annak ellenőrzése, hogy a kiterjesztésnek van-e új modulja
        if ( $Extension->{Module} ) {

            # annak ellenőrzése, hogy a modul betölthető-e
            if (
                !$Kernel::OM->Get('Kernel::System::Main')->RequireBaseClass( $Extension->{Module} )
                )
            {
                die "Nem lehet betölteni a dinamikus mezők háttérprogram modulját:"
                    . " $Extension->{Module}! $@";
            }
        }

        # annak ellenőrzése, hogy a kiterjesztés tartalmaz-e további viselkedéseket
        if ( IsHashRefWithData( $Extension->{Behaviors} ) ) {

            %{ $Self->{Behaviors} } = (
                %{ $Self->{Behaviors} },
                %{ $Extension->{Behaviors} }
            );
        }
    }

    return $Self;
}
            ]]></programlisting>
        </para>
        <para>
            A <literal>new</literal> konstruktor hozza létre az osztály új példányát. A
kódolási irányelvek szerint más osztályoknak azon objektumait kell a
<literal>new</literal> konstruktorban létrehozni, amelyek ebben a modulban
szükségesek.
        </para>
        <para>
            Fontos a viselkedéseket helyesen meghatározni, mivel a mező lehet
használható vagy lehet nem használható bizonyos képernyőkön. Azokat a
függvényeket esetleg nem szükséges megvalósítani, amelyek olyan
viselkedésektől függenek, amelyek nem aktívak ennél a bizonyos mezőnél.
        </para>
        <note>
            <para>
                Az illesztőprogramokat kizárólag a <literal>BackendObject</literal> hozza
létre, és nem közvetlenül bármely egyéb modulból.
            </para>
        </note>
    <para>
        <programlisting><![CDATA[
sub EditFieldRender {
    my ( $Self, %Param ) = @_;

    # beállítások átvétele a mezőbeállításokból
    my $FieldConfig = $Param{DynamicFieldConfig}->{Config};
    my $FieldName   = 'DynamicField_' . $Param{DynamicFieldConfig}->{Name};
    my $FieldLabel  = $Param{DynamicFieldConfig}->{Label};

    my $Value = '';

    # a mezőérték beállítása vagy alapértelmezett
    if ( $Param{UseDefaultValue} ) {
        $Value = ( defined $FieldConfig->{DefaultValue} ? $FieldConfig->{DefaultValue} : '' );
    }
    $Value = $Param{Value} if defined $Param{Value};

    # a dinamikus mező értékének kibontása a webkérésből
    my $FieldValue = $Self->EditFieldValueGet(
        %Param,
    );

    # értékek beállítása a paraméterobjektumból, ha létezik
    if ( defined $FieldValue ) {
        $Value = $FieldValue;
    }

    # osztály ellenőrzése és beállítása, ha szükséges
    my $FieldClass = 'DynamicFieldText W50pc';
    if ( defined $Param{Class} && $Param{Class} ne '' ) {
        $FieldClass .= ' ' . $Param{Class};
    }

    # mező beállítása kötelezőként
    $FieldClass .= ' Validate_Required' if $Param{Mandatory};

    # hiba CSS osztály beállítása
    $FieldClass .= ' ServerError' if $Param{ServerError};

    my $HTMLString = <<"EOF";
<input type="password" class="$FieldClass" id="$FieldName" name="$FieldName" title="$FieldLabel" value="$Value" />
EOF

    if ( $Param{Mandatory} ) {
        my $DivID = $FieldName . 'Error';

        # kliensoldali ellenőrzéshez
        $HTMLString .= <<"EOF";
    <div id="$DivID" class="TooltipErrorMessage">
        <p>
            \$Text{"Ez a mező kötelező."}
        </p>
    </div>
EOF
    }

    if ( $Param{ServerError} ) {

        my $ErrorMessage = $Param{ErrorMessage} || 'Ez a mező kötelező.';
        my $DivID = $FieldName . 'ServerError';

        # kiszolgálóoldali ellenőrzéshez
        $HTMLString .= <<"EOF";
    <div id="$DivID" class="TooltipErrorMessage">
        <p>
            \$Text{"$ErrorMessage"}
        </p>
    </div>
EOF
    }

    # az EditLabelRender meghívása a közös illesztőprogramon
    my $LabelString = $Self->EditLabelRender(
        %Param,
        DynamicFieldConfig => $Param{DynamicFieldConfig},
        Mandatory          => $Param{Mandatory} || '0',
        FieldName          => $FieldName,
    );

    my $Data = {
        Field => $HTMLString,
        Label => $LabelString,
    };

    return $Data;
}
            ]]></programlisting>
        </para>
        <para>
            Ez a függvény felelős a mező és annak címkéje HTML ábrázolásának
létrehozásáért, és olyan szerkesztő képernyőkön használják, mint például az
<literal>AgentTicketPhone</literal>, <literal>AgentTicketNote</literal>,
stb.
        </para>
        <para>
            <programlisting><![CDATA[
sub DisplayValueRender {
    my ( $Self, %Param ) = @_;

    # a HTMLOutput beállítása alapértelmezettként, ha nincs megadva
    if ( !defined $Param{HTMLOutput} ) {
        $Param{HTMLOutput} = 1;
    }

    my $Value;
    my $Title;

    # annak ellenőrzése, hogy a mező be van-e állítva a jelszó megjelenítéséhez vagy sem
    if (
        defined $Param{DynamicFieldConfig}->{Config}->{ShowValue}
        && $Param{DynamicFieldConfig}->{Config}->{ShowValue} eq 'Yes'
        )
    {

        # a nyers Title és Value szövegek lekérése a mezőértékből
        $Value = defined $Param{Value} ? $Param{Value} : '';
        $Title = $Value;
    }
    else {

        # a maszk megjelenítése az érték helyett
        $Value = $Param{DynamicFieldConfig}->{Config}->{ValueMask} || '';
        $Title = 'A mező értéke rejtve van.'
    }

    # HTMLOutput átalakítások
    if ( $Param{HTMLOutput} ) {
        $Value = $Param{LayoutObject}->Ascii2Html(
            Text => $Value,
            Max => $Param{ValueMaxChars} || '',
        );

        $Title = $Param{LayoutObject}->Ascii2Html(
            Text => $Title,
            Max => $Param{TitleMaxChars} || '',
        );
    }
    else {
        if ( $Param{ValueMaxChars} && length($Value) > $Param{ValueMaxChars} ) {
            $Value = substr( $Value, 0, $Param{ValueMaxChars} ) . '...';
        }
        if ( $Param{TitleMaxChars} && length($Title) > $Param{TitleMaxChars} ) {
            $Title = substr( $Title, 0, $Param{TitleMaxChars} ) . '...';
        }
    }

    # visszatérési szerkezet létrehozása
    my $Data = {
        Value => $Value,
        Title => $Title,
    };

    return $Data;
}
            ]]></programlisting>
        </para>
        <para>
            A <code>DisplayValueRender()</code> függvény egyszerű szövegként adja vissza
a mező értékét és annak feliratát (mindkettő lefordítható). Ennél a bizonyos
példánál azt ellenőrizzük, hogy a jelszót meg kell-e mutatni, vagy egy
beállítási paraméter által előre meghatározott maszkot kell-e megjeleníteni
a dinamikus mezőben.
        </para>
        <para>
            <programlisting><![CDATA[
sub ReadableValueRender {
    my ( $Self, %Param ) = @_;

    my $Value;
    my $Title;

    # annak ellenőrzése, hogy a mező be van-e állítva a jelszó megjelenítéséhez vagy sem
    if (
        defined $Param{DynamicFieldConfig}->{Config}->{ShowValue}
        && $Param{DynamicFieldConfig}->{Config}->{ShowValue} eq 'Yes'
        )
    {

        # a nyers Title és Value szövegek lekérése a mezőértékből
        $Value = $Param{Value} // '';
        $Title = $Value;
    }
    else {

        # a maszk megjelenítése az érték helyett
        $Value = $Param{DynamicFieldConfig}->{Config}->{ValueMask} || '';
        $Title = 'A mező értéke rejtve van.'
    }

    # szövegek levágása, ha szükséges
    if ( $Param{ValueMaxChars} && length($Value) > $Param{ValueMaxChars} ) {
        $Value = substr( $Value, 0, $Param{ValueMaxChars} ) . '...';
    }
    if ( $Param{TitleMaxChars} && length($Title) > $Param{TitleMaxChars} ) {
        $Title = substr( $Title, 0, $Param{TitleMaxChars} ) . '...';
    }

    # visszatérési szerkezet létrehozása
    my $Data = {
        Value => $Value,
        Title => $Title,
    };

    return $Data;
}
            ]]></programlisting>
        </para>
        <para>
            Ez a függvény hasonló a <code>DisplayValueRender()</code> függvényhez, de
olyan helyeken használják, ahol nincs <literal>LayoutObject</literal>.
        </para>
    </section>

    <section id="dynamic-fields-new-field-driver-other-functions">
        <title>Egyéb függvények:</title>
        <para>
            A következők olyan egyéb függvények, amelyek talán szükségesek lehetnek, ha
egy új dinamikus mező nem örököl más osztályokból. Ezen függvények teljes
kódjának megtekintéséhez nézzen bele közvetlenül a
<filename>Kernel/System/DynamicField/Driver/Base.pm</filename> és a
<filename>Kernel/System/DynamicField/Driver/BaseText.pm</filename> fájlokba.
        </para>
        <para>
            <programlisting><![CDATA[
sub ValueGet { ... }
            ]]></programlisting>
        </para>
        <para>
            Ez a függvény lekéri az értéket a mezőből egy adott objektumnál. Ebben az
esetben az első szövegértéket adjuk vissza, mivel a mező egyszerre csak egy
szövegértéket tárol.
        </para>
        <para>
            <programlisting><![CDATA[
sub ValueSet { ... }
            ]]></programlisting>
        </para>
        <para>
            A <code>ValueSet()</code> függvényt egy dinamikus mező érték tárolásához
használják. Ebben az esetben a mező csak egy szöveg típusú értéket
tárol. Más mezők tárolhatnak egynél több értéket is a
<literal>ValueText</literal>, a <literal>ValueDateTime</literal> vagy a
<literal>ValueInt</literal> formátumnál.
        </para>
        <para>
            <programlisting><![CDATA[
sub ValueDelete { ... }
            ]]></programlisting>
        </para>
        <para>
            Ezt a függvényt egy mező értékének törléséhez használják, amely egy bizonyos
objektumazonosítóhoz van csatolva. Például ha egy objektum példánynak
törlésére készülnek, akkor nincs oka a mezőérték tárolásának az adatbázisban
annál a bizonyos objektumpéldánynál.
        </para>
        <para>
            <programlisting><![CDATA[
sub AllValuesDelete { ... }
            ]]></programlisting>
        </para>
        <para>
            Az <code>AllValuesDelete()</code> függvényt az összes érték törléséhez
használják egy bizonyos dinamikus mezőből. Ez a függvény nagyon hasznos,
amikor egy dinamikus mező törlésre fog kerülni.
        </para>
        <para>
            <programlisting><![CDATA[
sub ValueValidate { ... }
            ]]></programlisting>
        </para>
        <para>
            A <code>ValueValidate()</code> függvényt annak ellenőrzéséhez használják,
hogy az érték megegyezik-e a típusának.
        </para>
        <para>
            <programlisting><![CDATA[
sub SearchSQLGet { ... }
            ]]></programlisting>
        </para>
        <para>
            Ezt a függvényt a <literal>TicketSearch</literal> alapmodul használja egy
jegy kereséséhez szükséges belső lekérdezés felépítéséhez, ezt a mezőt
alapul véve keresési paraméterként.
        </para>
        <para>
            <programlisting><![CDATA[
sub SearchSQLOrderFieldGet { ... }
            ]]></programlisting>
        </para>
        <para>
            A <literal>SearchSQLOrderFieldGet</literal> szintén egy segítő a
<literal>TicketSearch</literal> modulhoz. A
<literal>$Param{TableAlias}</literal> paramétert meg kell tartani, és a
<literal>value_text</literal> lecserélhető a <literal>value_date</literal>
vagy a <literal>value_int</literal> paraméterrel a mezőtől függően.
        </para>
        <para>
            <programlisting><![CDATA[
sub EditFieldValueGet { ... }
            ]]></programlisting>
        </para>
        <para>
            Az <code>EditFieldValueGet()</code> egy olyan függvény, amelyet az OTRS
szerkesztő képernyőin használnak, és a célja a mező értékének lekérése vagy
egy sablonból (mint például az általános ügyintéző profilból), vagy egy
webkérésből. Ez a függvény megkapja a webkérést a
<literal>$Param{ParamObject}</literal> paraméterben, amely az
előtétprogram-modul vagy a képernyő <literal>ParamObject</literal>
objektumának egy másolata.
        </para>
        <para>
            Két visszatérési formátum létezik ennél a függvénynél. A normál, amely
egyszerűen a nyers érték, vagy egy szerkezet, amely a mezőnév =&gt;
mezőérték páros. Például egy dátum dinamikus mező normális esetben a dátumot
szövegként adja vissza, és ha egy szerkezetet kell visszaadnia, akkor a
kivonatban egy párost ad vissza a dátum minden egyes részéhez.
        </para>
        <para>
            Ha az eredménynek egy szerkezetnek kell lennie, akkor normális esetben ezt
arra használják, hogy az értékét egy sablonban tárolja, mint például egy
általános ügyintéző profilban. Például egy dátummező számos HTML összetevőt
használ a mező felépítéséhez, mint például a „használt” jelölőnégyzetet és
kiválasztókat az évhez, hónaphoz, naphoz, stb.
        </para>
        <para>
            <programlisting><![CDATA[
sub EditFieldValueValidate { ... }
            ]]></programlisting>
        </para>
        <para>
            Ennek a függvénynek biztosítania kell legalább egy metódust az
ellenőrzéshez, ha a mező üres, és hibát kell visszaadnia, ha a mező üres és
kötelező, de végrehajthat további ellenőrzéseket is a másfajta mezőknél,
mint például ha a kiválasztott lehetőség érvényes, vagy ha egy dátumnak csak
a múltban kell lennie, stb. Egy egyéni hibaüzenetet is biztosíthat.
        </para>
        <para>
            <programlisting><![CDATA[
sub SearchFieldRender { ... }
            ]]></programlisting>
        </para>
        <para>
            Ezt a függvényt a jegykeresés párbeszédablak használja, és hasonló a
<code>EditFieldRander()</code> függvényhez, de normális esetben egy keresési
képernyőn kisebb változtatásokat kell elvégezni az összes mezőnél. Például
ebben az esetben egy HTML szöveges beviteli mező használunk egy
jelszóbeviteli mező helyett. Más mezőkben (például legördülő mező)
többválasztósként jelenik meg azért, hogy egyszerre több érték keresését
tegye lehetővé a felhasználónak.
        </para>
        <para>
            <programlisting><![CDATA[
sub SearchFieldValueGet { ... }
            ]]></programlisting>
        </para>
        <para>
            Nagyon hasonló az <code>EditFieldValueGet()</code> függvényhez, de eltérő
név előtagot használ a keresési párbeszédablak képernyőhöz átírva.
        </para>
        <para>
            <programlisting><![CDATA[
sub SearchFieldParameterBuild { ... }
            ]]></programlisting>
        </para>
        <para>
            A <code>SearchFieldParameterBuild()</code> függvényt is a jegykeresés
párbeszédablak használja a helyes operátor és érték beállításához, hogy
elvégezze a keresést ezen a mezőn. Azt is visszaadja, hogy az értéket hogyan
kell megjeleníteni a használt keresési attribútumokban a találatok oldalon.
        </para>
        <para>
            <programlisting><![CDATA[
sub StatsFieldParameterBuild { ... }
            ]]></programlisting>
        </para>
        <para>
            Ezt a függvényt a statisztikák moduljai használják. Tartalmazza a mező
meghatározást a statisztikák formátumában. A rögzített értékekkel rendelkező
mezőknél tartalmazza az összes lehetséges értéket is, és ha azok
lefordíthatók, akkor nézze meg a <literal>BaseSelect</literal>
illesztőprogram kódját példaként arra, hogy azokat hogyan kell
megvalósítani.
        </para>
        <para>
            <programlisting><![CDATA[
sub StatsSearchFieldParameterBuild { ... }
            ]]></programlisting>
        </para>
        <para>
            A <code>StatsSearchFieldParameterBuild()</code> nagyon hasonló a
<code>SearchFieldParameterBuild()</code> függvényhez. A különbség az, hogy a
<code>SearchFieldParameterBuild()</code> a keresési profilból kapja meg az
értéket, és ez pedig közvetlenül a paramétereiből kapja meg az értéket.
        </para>
        <para>
            Ezt a függvényt a statisztikák modul használja.
        </para>
        <para>
            <programlisting><![CDATA[
sub TemplateValueTypeGet { ... }
            ]]></programlisting>
        </para>
        <para>
            A <code>TemplateValueTypeGet()</code> függvényt annak megismeréséhez
használják, hogy a dinamikus mező értékei hogyan vannak eltárolva egy olyan
profilnál, amelyet le kell kérni (SCALAR vagy ARRAY formában), és
meghatározza a mező helyes nevét is a profilban.
        </para>
        <para>
            <programlisting><![CDATA[
sub RandomValueSet { ... }
            ]]></programlisting>
        </para>
        <para>
            Ezt a függvényt az <filename>otrs.FillDB.pl</filename> parancsfájl
használja, hogy feltöltse az adatbázist néhány teszt és véletlenszerű
adattal. A függvény által beszúrt érték nem igazán fontos. Az egyetlen
megkötés az, hogy az értéknek kompatibilisnek kell lennie a mezőérték
típusával.
        </para>
        <para>
            <programlisting><![CDATA[
sub ObjectMatch { ... }
            ]]></programlisting>
        </para>
        <para>
            Az értesítési modulok használják. Ez a függvény 1-et ad vissza, ha a mező
jelen van a <literal>$Param{ObjectAttributes}</literal> paraméterben, és ha
megegyezik a megadott értékkel.
        </para>
    </section>
</section>
