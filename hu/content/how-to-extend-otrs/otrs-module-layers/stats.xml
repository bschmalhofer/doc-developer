<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="module-stats">
    <title>Statisztikák modul</title>
    <para>
A belső statisztikamoduloknak két különböző típusa létezik - dinamikus és
statikus. Ez a szakasz azt írja le, hogy az ilyen statisztikamodulok hogyan
fejleszthetők.
    </para>
    <section id="module-stats-dynamic">
        <title>Dinamikus statisztikák</title>
        <para>
A statikus statisztikamodulokkal ellentétben a dinamikus statisztikák
beállíthatók az OTRS webes felületén keresztül. Ebben a szakaszban egy
egyszerű statisztikamodul kerül fejlesztésre. Minden egyes dinamikus
statisztikamodulnak meg kell valósítania ezeket a szubrutinokat:
        </para>
        <para>
            <itemizedlist mark="round">
                <listitem>
                    <para><literal>new</literal></para>
                </listitem>
                <listitem>
                    <para><literal>GetObjectName</literal></para>
                </listitem>
                <listitem>
                    <para><literal>GetObjectAttributes</literal></para>
                </listitem>
                <listitem>
                    <para><literal>ExportWrapper</literal></para>
                </listitem>
                <listitem>
                    <para><literal>ImportWrapper</literal></para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
Továbbá a modulnak meg kell valósítania vagy a
<literal>GetStatElement</literal>, vagy a <literal>GetStatTable</literal>
rutint. És ha az eredménytábla fejlécsorát is meg kell változtatni, akkor
egy úgynevezett <literal>GetHeaderLine</literal> szubrutint is fejleszteni
kell.
        </para>
        <section id="module-stats-dynamic-subroutines">
            <title>Kódpélda</title>
            <para>
Ebben a szakaszban egy minta statisztikamodul lesz megjelenítve, és minden
szubrutin elmagyarázásra kerül.
            </para>
            <para>
                <programlisting><![CDATA[
# --
# Kernel/System/Stats/Dynamic/DynamicStatsTemplate.pm - all advice functions
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::System::Stats::Dynamic::DynamicStatsTemplate;

use strict;
use warnings;

use Kernel::System::Queue;
use Kernel::System::State;
use Kernel::System::Ticket;
                ]]></programlisting>
            </para>
            <para>
Ez egy gyakori sabloncsomag, amely megtalálható a szokásos OTRS
modulokban. Az osztály/csomag neve a <literal>package</literal> kulcsszón
keresztül van deklarálva. Ezután a szükséges modulok használatának megadása
következik a <literal>use</literal> kulcsszóval.
            </para>
            <para>
                <programlisting><![CDATA[
sub new {
    my ( $Type, %Param ) = @_;

    # új kivonat lefoglalása az objektumhoz
    my $Self = {};
    bless( $Self, $Type );

    # a szükséges objektumok ellenőrzése
    for my $Object (
        qw(DBObject ConfigObject LogObject UserObject TimeObject MainObject EncodeObject)
        )
    {
        $Self->{$Object} = $Param{$Object} || die "Nincs $Object!";
    }

    # a létrehozott szükséges objektumok
    $Self->{QueueObject}    = Kernel::System::Queue->new( %{$Self} );
    $Self->{TicketObject}   = Kernel::System::Ticket->new( %{$Self} );
    $Self->{StateObject}    = Kernel::System::State->new( %{$Self} );

    return $Self;
}
                ]]></programlisting>
            </para>
            <para>
A <literal>new</literal> a statisztikamodul konstruktora. Ez hozza létre az
osztály új példányát. A kódolási irányelveknek megfelelően az ebben a
modulban szükséges más osztályok objektumait is a <literal>new</literal>
konstruktorban kell létrehozni. A 27-29. sorban van létrehozva a
statisztikák modul objektuma. A 31-37. sorban azt ellenőrzik, hogy az ebben
a kódban szükséges objektumok - vagy más objektumok létrehozásánál, vagy
ebben a modulban - át vannak-e adva. Ezután a többi objektum kerül
létrehozásra.
            </para>
            <para>
                <programlisting><![CDATA[
sub GetObjectName {
    my ( $Self, %Param ) = @_;

    return 'Minta statisztikák';
}
                ]]></programlisting>
            </para>
            <para>
A <literal>GetObjectName</literal> visszaad egy nevet a statisztikák
modulhoz. Ez az a címke, amely a lenyíló menüben jelenik meg a
beállításokban, valamint a meglévő statisztikák listájában (az „objektum”
oszlopban).
            </para>
            <para>
                <programlisting><![CDATA[
sub GetObjectAttributes {
    my ( $Self, %Param ) = @_;

    # állapotlista lekérése
    my %StateList = $Self->{StateObject}->StateList(
        UserID => 1,
    );

    # várólisták listájának lekérése
    my %QueueList = $Self->{QueueObject}->GetAllQueues();

    # a jelenlegi idő lekérése a 3830. hiba javításához
    my $TimeStamp = $Self->{TimeObject}->CurrentTimestamp();
    my ($Date) = split /\s+/, $TimeStamp;
    my $Today = sprintf "%s 23:59:59", $Date;

    my @ObjectAttributes = (
        {
            Name             => 'Állapot',
            UseAsXvalue      => 1,
            UseAsValueSeries => 1,
            UseAsRestriction => 1,
            Element          => 'StateIDs',
            Block            => 'MultiSelectField',
            Values           => \%StateList,
        },
        {
            Name             => 'Létrehozva várólistában',
            UseAsXvalue      => 1,
            UseAsValueSeries => 1,
            UseAsRestriction => 1,
            Element          => 'CreatedQueueIDs',
            Block            => 'MultiSelectField',
            Translation      => 0,
            Values           => \%QueueList,
        },
        {
            Name             => 'Létrehozás ideje',
            UseAsXvalue      => 1,
            UseAsValueSeries => 1,
            UseAsRestriction => 1,
            Element          => 'CreateTime',
            TimePeriodFormat => 'DateInputFormat',    # 'DateInputFormatLong',
            Block            => 'Time',
            TimeStop         => $Today,
            Values           => {
                TimeStart => 'TicketCreateTimeNewerDate',
                TimeStop  => 'TicketCreateTimeOlderDate',
            },
        },
    );

    return @ObjectAttributes;
}
                ]]></programlisting>
            </para>
            <para>
Ebben a minta statisztikák modulban három olyan attribútumot szeretnénk
szolgáltatni, amelyből a felhasználó választhat: a várólisták listáját, az
állapotok listáját és egy idő legördülőt. A legördülőben megjelenített
értékek lekéréséhez szükséges néhány művelet. Ebben az esetben a
<literal>StateList</literal> és a <literal>GetAllQueues</literal> kerül
meghívásra.
            </para>
            <para>
Ezután az attribútumok listája kerül létrehozásra. Minden egyes attribútum
egy kivonathivatkozáson keresztül van meghatározva. Ezeket a kulcsokat
használhatja:
            </para>
            <para>
                <itemizedlist mark="round" >
                    <listitem>
                        <para><literal>Name</literal></para>
                        <para>A címke a webes felületen.</para>
                    </listitem>
                    <listitem>
                        <para><literal>UseAsXvalue</literal></para>
                        <para>Ez az attribútum használható az X-tengelyen.</para>
                    </listitem>
                    <listitem>
                        <para><literal>UseAsValueSeries</literal></para>
                        <para>Ez az attribútum használható az Y-tengelyen.</para>
                    </listitem>
                    <listitem>
                        <para><literal>UseAsRestriction</literal></para>
                        <para>Ez az attribútum használható a korlátozásokhoz.</para>
                    </listitem>
                    <listitem>
                        <para><literal>Element</literal></para>
                        <para>A HTML mező neve.</para>
                    </listitem>
                    <listitem>
                        <para><literal>Block</literal></para>
                        <para>A blokknév a sablonfájlban (például
<filename>&lt;OTRS_HOME&gt;/Kernel/Output/HTML/Standard/AgentStatsEditXaxis.tt</filename>).</para>
                    </listitem>
                    <listitem>
                        <para><literal>Values</literal></para>
                        <para>Az attribútumban megjelenített értékek.</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
Tipp: Ha telepíti ezt a mintát, és beállít egy statisztikát néhány
várólistával (mondjuk „A várólista” és „B várólista”), akkor ezek a
várólisták az egyetlenek, amelyek láthatóak lesznek a felhasználónak, amikor
elindítja a statisztikát. Néha egy dinamikus legördülő vagy többválasztós
mező szükséges. Ebben az esetben beállíthatja a
<literal>SelectedValues</literal> kulcsot az attribútum meghatározásában:
            </para>
            <para>
                <programlisting><![CDATA[
        {
            Name             => 'Létrehozva várólistában',
            UseAsXvalue      => 1,
            UseAsValueSeries => 1,
            UseAsRestriction => 1,
            Element          => 'CreatedQueueIDs',
            Block            => 'MultiSelectField',
            Translation      => 0,
            Values           => \%QueueList,
            SelectedValues   => [ @SelectedQueues ],
        },
                ]]></programlisting>
            </para>
            <para>
                <programlisting><![CDATA[
sub GetStatElement {
    my ( $Self, %Param ) = @_;

    # jegyek keresése
    return $Self->{TicketObject}->TicketSearch(
        UserID     => 1,
        Result     => 'COUNT',
        Permission => 'ro',
        Limit      => 100_000_000,
        %Param,
    );
}
                ]]></programlisting>
            </para>
            <para>
A <literal>GetStatElement</literal> kerül meghívásra minden egyes cellánál
az eredménytáblában. Így annak számszerű értéknek kell lennie. Ebben a
mintában egy egyszerű jegykeresést hajt végre. A <literal>%Param</literal>
kivonat tartalmaz információkat a „jelenlegi” X-értékről és Y-értékről,
valamint bármely korlátozásról. Így egy olyan cellánál, amelynek össze kell
számolnia a „nyitott” állapotban lévő létrehozott jegyeket a „Misc”
várólistánál, az átadott paraméter kivonat valahogy így néz ki:
            </para>
            <para>
                <programlisting><![CDATA[
    'CreatedQueueIDs' => [
        '4'
    ],
    'StateIDs' => [
        '2'
    ]
                ]]></programlisting>
            </para>
            <para>
Ha a „cellánkénti” számítást el kellene kerülni, akkor a
<literal>GetStatTable</literal> egy alternatíva. A
<literal>GetStatTable</literal> visszaadja a sorok listáját, amely ezentúl
egy tömbhivatkozások tömbje. Ez ugyanahhoz az eredményhez vezet mint a
<literal>GetStatElement</literal> használata.
            </para>
            <para>
                <programlisting><![CDATA[
sub GetStatTable {
    my ( $Self, %Param ) = @_;

    my @StatData;

    for my $StateName ( keys %{ $Param{TableStructure} } ) {
        my @Row;
        for my $Params ( @{ $Param{TableStructure}->{$StateName} } ) {
            my $Tickets = $Self->{TicketObject}->TicketSearch(
                UserID     => 1,
                Result     => 'COUNT',
                Permission => 'ro',
                Limit      => 100_000_000,
                %{$Params},
            );

            push @Row, $Tickets;
        }

        push @StatData, [ $StateName, @Row ];
    }

    return @StatData;
}
                ]]></programlisting>
            </para>
            <para>
A <literal>GetStatTable</literal> az összes olyan információt lekéri a
statisztikák lekérdezéssel kapcsolatban, amelyek szükségesek. Az átadott
paraméterek információkat tartalmaznak az attribútumokról
(<literal>Restrictions</literal>, olyan attribútumok, amelyek az
X/Y-tengelynél vannak használva) és a táblaszerkezetről. A táblaszerkezet
egy olyan kivonathivatkozás, ahol a kulcsok az Y-tengely értékei, és azok
értékei kivonathivatkozások a <literal>GetStatElement</literal>
szubrutinokhoz használt paraméterekkel.
            </para>
            <para>
                <programlisting><![CDATA[
    'Restrictions' => {},
    'TableStructure' => {
        'closed successful' => [
            {
                'CreatedQueueIDs' => [
                    '3'
                ],
                'StateIDs' => [
                    '2'
                ]
            },
        ],
        'closed unsuccessful' => [
            {
                'CreatedQueueIDs' => [
                    '3'
                ],
                'StateIDs' => [
                    '3'
                ]
            },
        ],
    },
    'ValueSeries' => [
        {
            'Block' => 'MultiSelectField',
            'Element' => 'StateIDs',
            'Name' => 'Állapot',
            'SelectedValues' => [
                '5',
                '3',
                '2',
                '1',
                '4'
            ],
            'Translation' => 1,
            'Values' => {
                '1' => 'new',
                '10' => 'closed with workaround',
                '2' => 'closed successful',
                '3' => 'closed unsuccessful',
                '4' => 'open',
                '5' => 'removed',
                '6' => 'pending reminder',
                '7' => 'pending auto close+',
                '8' => 'pending auto close-',
                '9' => 'merged'
            }
        }
    ],
    'XValue' => {
        'Block' => 'MultiSelectField',
        'Element' => 'CreatedQueueIDs',
        'Name' => 'Létrehozva várólistában',
        'SelectedValues' => [
            '3',
            '4',
            '1',
            '2'
        ],
        'Translation' => 0,
        'Values' => {
            '1' => 'Postmaster',
            '2' => 'Raw',
            '3' => 'Junk',
            '4' => 'Misc'
        }
    }
                ]]></programlisting>
            </para>
            <para>
Néha a táblázat fejléceit meg kell változtatni. Ebben az esetben egy
<literal>GetHeaderLine</literal> nevű szubrutint kell megvalósítani. Ennek a
szubrutinnak egy tömbhivatkozást kell visszaadnia az oszlopfejlécekkel mint
elemekkel. Ez információkat kap az átadott X-értékekkel kapcsolatban.
            </para>
            <para>
                <programlisting><![CDATA[
sub GetHeaderLine {
    my ( $Self, %Param ) = @_;

    my @HeaderLine = ('');
    for my $SelectedXValue ( @{ $Param{XValue}->{SelectedValues} } ) {
        push @HeaderLine, $Param{XValue}->{Values}->{$SelectedXValue};
    }

    return \@HeaderLine;
}
                ]]></programlisting>
            </para>
            <para>
                <programlisting><![CDATA[
sub ExportWrapper {
    my ( $Self, %Param ) = @_;

    # azonosítók átalakítása a használt helyesíráshoz
    for my $Use (qw(UseAsValueSeries UseAsRestriction UseAsXvalue)) {
        ELEMENT:
        for my $Element ( @{ $Param{$Use} } ) {
            next ELEMENT if !$Element || !$Element->{SelectedValues};
            my $ElementName = $Element->{Element};
            my $Values      = $Element->{SelectedValues};

            if ( $ElementName eq 'QueueIDs' || $ElementName eq 'CreatedQueueIDs' ) {
                ID:
                for my $ID ( @{$Values} ) {
                    next ID if !$ID;
                    $ID->{Content} = $Self->{QueueObject}->QueueLookup( QueueID => $ID->{Content} );
                }
            }
            elsif ( $ElementName eq 'StateIDs' || $ElementName eq 'CreatedStateIDs' ) {
                my %StateList = $Self->{StateObject}->StateList( UserID => 1 );
                ID:
                for my $ID ( @{$Values} ) {
                    next ID if !$ID;
                    $ID->{Content} = $StateList{ $ID->{Content} };
                }
            }
        }
    }
    return \%Param;
}
                ]]></programlisting>
            </para>
            <para>
A beállított statisztikák exportálhatók XML-formátumba. De ahogy a
várólistáknál, ahol ugyanazok a várólistanevek rendelkezhetnek különböző
azonosítókkal a különböző OTRS példányoknál, különösen fájdalmas lehet az
azonosítók exportálása (a statisztikák ekkor rossz számokat számítanának
ki). Ezért egy exportálási átalakítót kell írni, hogy az azonosítók helyett
neveket használjon. Ezt a statisztikák modul minden egyes „dimenziójánál” el
kell végezni (X-tengely, Y-tengely és korlátozások).
            </para>
            <para>
Az <literal>ImportWrapper</literal> fordítva működik - átalakítja a nevet az
azonosítóra abban a példányban, ahova a beállítások importálásra kerülnek.
            </para>
            <para>
Ez egy minta exportálás:
            </para>
            <para>
                <programlisting><![CDATA[
<?xml version="1.0" encoding="utf-8"?>

<otrs_stats>
<Cache>0</Cache>
<Description>Minta statisztikák modul</Description>
<File></File>
<Format>CSV</Format>
<Format>Print</Format>
<Object>DeveloperManualSample</Object>
<ObjectModule>Kernel::System::Stats::Dynamic::DynamicStatsTemplate</ObjectModule>
<ObjectName>Sample Statistics</ObjectName>
<Permission>stats</Permission>
<StatType>dynamic</StatType>
<SumCol>0</SumCol>
<SumRow>0</SumRow>
<Title>Sample 1</Title>
<UseAsValueSeries Element="StateIDs" Fixed="1">
<SelectedValues>removed</SelectedValues>
<SelectedValues>closed unsuccessful</SelectedValues>
<SelectedValues>closed successful</SelectedValues>
<SelectedValues>new</SelectedValues>
<SelectedValues>open</SelectedValues>
</UseAsValueSeries>
<UseAsXvalue Element="CreatedQueueIDs" Fixed="1">
<SelectedValues>Junk</SelectedValues>
<SelectedValues>Misc</SelectedValues>
<SelectedValues>Postmaster</SelectedValues>
<SelectedValues>Raw</SelectedValues>
</UseAsXvalue>
<Valid>1</Valid>
</otrs_stats>
                ]]></programlisting>
            </para>
            <para>
Most, hogy az összes szubrutin elmagyarázásra került, itt a teljes minta
statisztikák modul.
            </para>
            <para>
                <programlisting><![CDATA[
# --
# Kernel/System/Stats/Dynamic/DynamicStatsTemplate.pm - all advice functions
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::System::Stats::Dynamic::DynamicStatsTemplate;

use strict;
use warnings;

use Kernel::System::Queue;
use Kernel::System::State;
use Kernel::System::Ticket;

sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {};
    bless( $Self, $Type );

    # check needed objects
    for my $Object (
        qw(DBObject ConfigObject LogObject UserObject TimeObject MainObject EncodeObject)
        )
    {
        $Self->{$Object} = $Param{$Object} || die "Got no $Object!";
    }

    # created needed objects
    $Self->{QueueObject}    = Kernel::System::Queue->new( %{$Self} );
    $Self->{TicketObject}   = Kernel::System::Ticket->new( %{$Self} );
    $Self->{StateObject}    = Kernel::System::State->new( %{$Self} );

    return $Self;
}

sub GetObjectName {
    my ( $Self, %Param ) = @_;

    return 'Sample Statistics';
}

sub GetObjectAttributes {
    my ( $Self, %Param ) = @_;

    # get state list
    my %StateList = $Self->{StateObject}->StateList(
        UserID => 1,
    );

    # get queue list
    my %QueueList = $Self->{QueueObject}->GetAllQueues();

    # get current time to fix bug#3830
    my $TimeStamp = $Self->{TimeObject}->CurrentTimestamp();
    my ($Date) = split /\s+/, $TimeStamp;
    my $Today = sprintf "%s 23:59:59", $Date;

    my @ObjectAttributes = (
        {
            Name             => 'State',
            UseAsXvalue      => 1,
            UseAsValueSeries => 1,
            UseAsRestriction => 1,
            Element          => 'StateIDs',
            Block            => 'MultiSelectField',
            Values           => \%StateList,
        },
        {
            Name             => 'Created in Queue',
            UseAsXvalue      => 1,
            UseAsValueSeries => 1,
            UseAsRestriction => 1,
            Element          => 'CreatedQueueIDs',
            Block            => 'MultiSelectField',
            Translation      => 0,
            Values           => \%QueueList,
        },
        {
            Name             => 'Create Time',
            UseAsXvalue      => 1,
            UseAsValueSeries => 1,
            UseAsRestriction => 1,
            Element          => 'CreateTime',
            TimePeriodFormat => 'DateInputFormat',    # 'DateInputFormatLong',
            Block            => 'Time',
            TimeStop         => $Today,
            Values           => {
                TimeStart => 'TicketCreateTimeNewerDate',
                TimeStop  => 'TicketCreateTimeOlderDate',
            },
        },
    );

    return @ObjectAttributes;
}

sub GetStatElement {
    my ( $Self, %Param ) = @_;

    # search tickets
    return $Self->{TicketObject}->TicketSearch(
        UserID     => 1,
        Result     => 'COUNT',
        Permission => 'ro',
        Limit      => 100_000_000,
        %Param,
    );
}

sub ExportWrapper {
    my ( $Self, %Param ) = @_;

    # wrap ids to used spelling
    for my $Use (qw(UseAsValueSeries UseAsRestriction UseAsXvalue)) {
        ELEMENT:
        for my $Element ( @{ $Param{$Use} } ) {
            next ELEMENT if !$Element || !$Element->{SelectedValues};
            my $ElementName = $Element->{Element};
            my $Values      = $Element->{SelectedValues};

            if ( $ElementName eq 'QueueIDs' || $ElementName eq 'CreatedQueueIDs' ) {
                ID:
                for my $ID ( @{$Values} ) {
                    next ID if !$ID;
                    $ID->{Content} = $Self->{QueueObject}->QueueLookup( QueueID => $ID->{Content} );
                }
            }
            elsif ( $ElementName eq 'StateIDs' || $ElementName eq 'CreatedStateIDs' ) {
                my %StateList = $Self->{StateObject}->StateList( UserID => 1 );
                ID:
                for my $ID ( @{$Values} ) {
                    next ID if !$ID;
                    $ID->{Content} = $StateList{ $ID->{Content} };
                }
            }
        }
    }
    return \%Param;
}

sub ImportWrapper {
    my ( $Self, %Param ) = @_;

    # wrap used spelling to ids
    for my $Use (qw(UseAsValueSeries UseAsRestriction UseAsXvalue)) {
        ELEMENT:
        for my $Element ( @{ $Param{$Use} } ) {
            next ELEMENT if !$Element || !$Element->{SelectedValues};
            my $ElementName = $Element->{Element};
            my $Values      = $Element->{SelectedValues};

            if ( $ElementName eq 'QueueIDs' || $ElementName eq 'CreatedQueueIDs' ) {
                ID:
                for my $ID ( @{$Values} ) {
                    next ID if !$ID;
                    if ( $Self->{QueueObject}->QueueLookup( Queue => $ID->{Content} ) ) {
                        $ID->{Content}
                            = $Self->{QueueObject}->QueueLookup( Queue => $ID->{Content} );
                    }
                    else {
                        $Self->{LogObject}->Log(
                            Priority => 'error',
                            Message  => "Import: Can' find the queue $ID->{Content}!"
                        );
                        $ID = undef;
                    }
                }
            }
            elsif ( $ElementName eq 'StateIDs' || $ElementName eq 'CreatedStateIDs' ) {
                ID:
                for my $ID ( @{$Values} ) {
                    next ID if !$ID;

                    my %State = $Self->{StateObject}->StateGet(
                        Name  => $ID->{Content},
                        Cache => 1,
                    );
                    if ( $State{ID} ) {
                        $ID->{Content} = $State{ID};
                    }
                    else {
                        $Self->{LogObject}->Log(
                            Priority => 'error',
                            Message  => "Import: Can' find state $ID->{Content}!"
                        );
                        $ID = undef;
                    }
                }
            }
        }
    }
    return \%Param;
}

1;
                ]]></programlisting>
            </para>
        </section>
        <section id="module-stats-dynamic-configuration">
            <title>Beállítási példa</title>
            <para>
                <programlisting><![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<otrs_config version="1.0" init="Config">
    <ConfigItem Name="Stats::DynamicObjectRegistration###DynamicStatsTemplate" Required="0" Valid="1">
        <Description Lang="en">Here you can decide if the common stats module may generate stats about the number of default tickets a requester created.</Description>
        <Group>Framework</Group>
        <SubGroup>Core::Stats</SubGroup>
        <Setting>
            <Hash>
                <Item Key="Module">Kernel::System::Stats::Dynamic::DynamicStatsTemplate</Item>
            </Hash>
        </Setting>
    </ConfigItem>
</otrs_config>
                ]]></programlisting>
            </para>
        </section>
        <section id="module-stats-dynamic-use_cases">
            <title>Használati eset példák</title>
            <para>
Használati esetek.
            </para>
        </section>
        <section id="module-stats-dynamic-caveats">
            <title>Ellenjavaslatok és figyelmeztetések</title>
            <para>
Ha nagyon sok cellája van az eredménytáblázatban és a
<literal>GetStatElement</literal> meglehetősen összetett, akkor a kérés
eltarthat egy ideig.
            </para>
        </section>
        <section id="module-stats-dynamic-releases">
            <title>Kiadási elérhetőség</title>
            <para>
A dinamikus statisztikamodulok az OTRS 2.0 óta érhetők el.
            </para>
        </section>
    </section>
    <section id="module-stats-static">
        <title>Statikus statisztikák</title>
        <para>
A következő bekezdések a statikus statisztikákat írják le. A statikus
statisztikákat nagyon könnyű létrehozni, mivel ezeknek a moduloknak csak
három szubrutint kell megvalósítaniuk.
        </para>
        <para>
            <itemizedlist mark="round">
                <listitem>
                    <para><literal>new</literal></para>
                </listitem>
                <listitem>
                    <para><literal>Param</literal></para>
                </listitem>
                <listitem>
                    <para><literal>Run</literal></para>
                </listitem>
            </itemizedlist>
        </para>
        <section id="module-stats-static-subroutines">
            <title>Kódpélda</title>
            <para>
A következő bekezdések a statikus statisztikákban szükséges szubrutinokat
mutatják be.
            </para>
            <para>
                <programlisting><![CDATA[
sub new {
    my ( $Type, %Param ) = @_;

    # új kivonat lefoglalása az objektumhoz
    my $Self = {%Param};
    bless( $Self, $Type );

    # az összes szükséges objektum ellenőrzése
    for my $Needed (
        qw(DBObject ConfigObject LogObject
        TimeObject MainObject EncodeObject)
        )
    {
        $Self->{$Needed} = $Param{$Needed} || die "Nincs $Needed";
    }

    # a szükséges objektumok létrehozása
    $Self->{TypeObject}   = Kernel::System::Type->new( %{$Self} );
    $Self->{TicketObject} = Kernel::System::Ticket->new( %{$Self} );
    $Self->{QueueObject}  = Kernel::System::Queue->new( %{$Self} );

    return $Self;
}
                ]]></programlisting>
            </para>
            <para>
A <literal>new</literal> hozza létre a statikus statisztikák osztályának egy
új példányát. Először létrehoz egy új objektumot, és azután ellenőrzi a
szükséges objektumokat.
            </para>
            <para>
                <programlisting><![CDATA[
sub Param {
    my $Self = shift;

    my %Queues = $Self->{QueueObject}->GetAllQueues();
    my %Types  = $Self->{TypeObject}->TypeList(
        Valid => 1,
    );

    my @Params = (
        {
            Frontend  => 'Type',
            Name      => 'TypeIDs',
            Multiple  => 1,
            Size      => 3,
            Data      => \%Types,
        },
        {
            Frontend  => 'Queue',
            Name      => 'QueueIDs',
            Multiple  => 1,
            Size      => 3,
            Data      => \%Queues,
        },
    );

    return @Params;
}
                ]]></programlisting>
            </para>
            <para>
A <literal>Param</literal> metódus biztosítja az összes olyan paraméter és
attribútum listáját, amelyek kiválaszthatók egy statikus statisztika
létrehozásához. Megkap néhány átadott paramétert: az értékeket egy kérésben
szolgáltatott statisztikák attribútumaihoz, a statisztikák formátumát és az
objektum nevét (a modul nevét).
            </para>
            <para>
A paramétereknek és az attribútumoknak kivonathivatkozásoknak kell lenniük
ezekkel a kulcs-érték párokkal:
            </para>
            <para>
                <itemizedlist mark="round" >
                    <listitem>
                        <para><literal>Frontend</literal></para>
                        <para>A címke a webes felületen.</para>
                    </listitem>
                    <listitem>
                        <para><literal>Name</literal></para>
                        <para>A HTML mező neve.</para>
                    </listitem>
                    <listitem>
                        <para><literal>Data</literal></para>
                        <para>Az attribútumban megjelenített értékek.</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
Egyéb paraméterek is használhatók a <literal>LayoutObject</literal>
<literal>BuildSelection</literal> metódusánál, ahogy az a
<literal>Size</literal> és <literal>Multiple</literal> paraméterekkel
történik ebben a minta modulban.
            </para>
            <para>
                <programlisting><![CDATA[
sub Run {
    my ( $Self, %Param ) = @_;

    # a szükséges dolgok ellenőrzése
    for my $Needed (qw(TypeIDs QueueIDs)) {
        if ( !$Param{$Needed} ) {
            $Self->{LogObject}->Log(
                Priority => 'error',
                Message  => "Szükséges: $Needed!",
            );
            return;
        }
    }

    # a jelentés címének beállítása
    my $Title = 'Jegyek várólistánként';

    # táblázat címsorok
    my @HeadData = (
        'Jegyszám',
        'Várólista',
        'Típus',
    );

    my @Data;
    my @TicketIDs = $Self->{TicketObject}->TicketSearch(
        UserID     => 1,
        Result     => 'ARRAY',
        Permission => 'ro',
        %Param,
    );

    for my $TicketID ( @TicketIDs ) {
        my %Ticket = $Self->{TicketObject}->TicketGet(
            UserID => 1,
            TicketID => $TicketID,
        );
        push @Data, [ $Ticket{TicketNumber}, $Ticket{Queue}, $Ticket{Type} ];
    }

    return ( [$Title], [@HeadData], @Data );
}
                ]]></programlisting>
            </para>
            <para>
Tulajdonképpen a <literal>Run</literal> metódus állítja elő a táblázat
adatait a statisztikákhoz. Megkapja az ennél a statisztikánál átadott
attribútumokat. Ebben a mintában a <literal>%Param</literal> paraméterben
egy <literal>TypeIDs</literal> kulcs és egy <literal>QueueIDs</literal>
kulcs létezik (lásd a <literal>Param</literal> metódusban lévő
attribútumokat), és ezek értékei tömbhivatkozások. A visszaadott adatok
három részből állnak: két tömbhivatkozásból és egy tömbből. Az első
tömbhivatkozásban a statisztika címe van eltárolva, a második tömbhivatkozás
tartalmazza a táblázatban lévő oszlopok címsorait. És ezután a táblázattörzs
adatai következnek.
            </para>
            <para>
                <programlisting><![CDATA[
# --
# Kernel/System/Stats/Static/StaticStatsTemplate.pm
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::System::Stats::Static::StaticStatsTemplate;

use strict;
use warnings;

use Kernel::System::Type;
use Kernel::System::Ticket;
use Kernel::System::Queue;

=head1 NAME

StaticStatsTemplate.pm - the module that creates the stats about tickets in a queue

=head1 SYNOPSIS

All functions

=head1 PUBLIC INTERFACE

=over 4

=cut

=item new()

create an object

    use Kernel::Config;
    use Kernel::System::Encode;
    use Kernel::System::Log;
    use Kernel::System::Main;
    use Kernel::System::Time;
    use Kernel::System::DB;
    use Kernel::System::Stats::Static::StaticStatsTemplate;

    my $ConfigObject = Kernel::Config->new();
    my $EncodeObject = Kernel::System::Encode->new(
        ConfigObject => $ConfigObject,
    );
    my $LogObject    = Kernel::System::Log->new(
        ConfigObject => $ConfigObject,
    );
    my $MainObject = Kernel::System::Main->new(
        ConfigObject => $ConfigObject,
        LogObject    => $LogObject,
    );
    my $TimeObject = Kernel::System::Time->new(
        ConfigObject => $ConfigObject,
        LogObject    => $LogObject,
    );
    my $DBObject = Kernel::System::DB->new(
        ConfigObject => $ConfigObject,
        LogObject    => $LogObject,
        MainObject   => $MainObject,
    );
    my $StatsObject = Kernel::System::Stats::Static::StaticStatsTemplate->new(
        ConfigObject => $ConfigObject,
        LogObject    => $LogObject,
        MainObject   => $MainObject,
        TimeObject   => $TimeObject,
        DBObject     => $DBObject,
        EncodeObject => $EncodeObject,
    );

=cut

sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {%Param};
    bless( $Self, $Type );

    # check all needed objects
    for my $Needed (
        qw(DBObject ConfigObject LogObject
        TimeObject MainObject EncodeObject)
        )
    {
        $Self->{$Needed} = $Param{$Needed} || die "Got no $Needed";
    }

    # create needed objects
    $Self->{TypeObject}   = Kernel::System::Type->new( %{$Self} );
    $Self->{TicketObject} = Kernel::System::Ticket->new( %{$Self} );
    $Self->{QueueObject}  = Kernel::System::Queue->new( %{$Self} );

    return $Self;
}

=item Param()

Get all parameters a user can specify.

    my @Params = $StatsObject->Param();

=cut

sub Param {
    my $Self = shift;

    my %Queues = $Self->{QueueObject}->GetAllQueues();
    my %Types  = $Self->{TypeObject}->TypeList(
        Valid => 1,
    );

    my @Params = (
        {
            Frontend  => 'Type',
            Name      => 'TypeIDs',
            Multiple  => 1,
            Size      => 3,
            Data      => \%Types,
        },
        {
            Frontend  => 'Queue',
            Name      => 'QueueIDs',
            Multiple  => 1,
            Size      => 3,
            Data      => \%Queues,
        },
    );

    return @Params;
}

=item Run()

generate the statistic.

    my $StatsInfo = $StatsObject->Run(
        TypeIDs  => [
            1, 2, 4
        ],
        QueueIDs => [
            3, 4, 6
        ],
    );

=cut

sub Run {
    my ( $Self, %Param ) = @_;

    # check needed stuff
    for my $Needed (qw(TypeIDs QueueIDs)) {
        if ( !$Param{$Needed} ) {
            $Self->{LogObject}->Log(
                Priority => 'error',
                Message  => "Need $Needed!",
            );
            return;
        }
    }

    # set report title
    my $Title = 'Tickets per Queue';

    # table headlines
    my @HeadData = (
        'Ticket Number',
        'Queue',
        'Type',
    );

    my @Data;
    my @TicketIDs = $Self->{TicketObject}->TicketSearch(
        UserID     => 1,
        Result     => 'ARRAY',
        Permission => 'ro',
        %Param,
    );

    for my $TicketID ( @TicketIDs ) {
        my %Ticket = $Self->{TicketObject}->TicketGet(
            UserID => 1,
            TicketID => $TicketID,
        );
        push @Data, [ $Ticket{TicketNumber}, $Ticket{Queue}, $Ticket{Type} ];
    }

    return ( [$Title], [@HeadData], @Data );
}

1;
                ]]></programlisting>
            </para>
        </section>
        <section id="module-stats-static-configuration">
            <title>Beállítási példa</title>
            <para>
Nincs szükség beállításokra. Közvetlenül telepítés után a modul elérhető egy
statisztika létrehozásához ennél a modulnál.
            </para>
        </section>
        <section id="module-stats-static-use_cases">
            <title>Használati eset példák</title>
            <para>
Használati esetek.
            </para>
        </section>
        <section id="module-stats-static-caveats">
            <title>Ellenjavaslatok és figyelmeztetések</title>
            <para>
Ellenjavaslatok és figyelmeztetések a statikus statisztikáknál.
            </para>
        </section>
        <section id="module-stats-static-releases">
            <title>Kiadási elérhetőség</title>
            <para>
A statikus statisztikamodulok az OTRS 1.3 óta érhetők el.
            </para>
        </section>
        <section id="module-stats-static-using-old-stats" >
            <title>Régi statikus statisztikák használata</title>
            <para>
A szabványos 1.3-as és 2.0-ás OTRS verziók már megkönnyítették a
statisztikák előállítását. Az OTRS 1.3-as és 2.0-ás verzióinak különféle
statisztikái, amelyek különlegesen lettek kifejlesztve, hogy kielégítsék az
ügyfelek követelményeit, használhatók az újabb verziókban is.
            </para>
            <para>
A fájlokat pusztán csak át kell helyezni a
<filename>Kernel/System/Stats/</filename> útvonalról a
<filename>Kernel/System/Stats/Static/</filename> könyvtárba. Továbbá a
megfelelő parancsfájl csomagnevét <literal>::Static</literal> névre kell
módosítani.
            </para>
            <para>
A következő példa azt mutatja be, hogy hogyan kell az első útvonalat
módosítani.
            </para>
            <para>
                <programlisting><![CDATA[
    package Kernel::System::Stats::AccountedTime;
                ]]></programlisting>
            </para>
            <para>
                <programlisting><![CDATA[
    package Kernel::System::Stats::Static::AccountedTime;
                ]]></programlisting>
            </para>
        </section>
    </section>
</section>
