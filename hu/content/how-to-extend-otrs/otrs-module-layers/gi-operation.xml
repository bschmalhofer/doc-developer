<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="operation">
    <title>Művelet</title>
    <para>
        A műveletet egy tevékenység végrehajtásához használják az OTRS-en belül. Ezt
a tevékenységet a távoli rendszer kéri, és tartalmazhat különleges
paramétereket azért, hogy helyesen végrehajtsa a tevékenységet. A
tevékenység végrehajtása után az OTRS elküld egy meghatározott megerősítést
a távoli rendszernek.
    </para>
    <section id="adding_operation">
        <title>Műveleti háttérprogram</title>
        <para>
            Ezután be fogjuk mutatni, hogy hogyan kell egy új műveletet
kifejleszteni. Minden egyes műveletnek meg kell valósítania ezeket a
szubrutinokat:
        </para>
        <para>
            <itemizedlist mark="round">
                <listitem>
                    <para><literal>new</literal></para>
                </listitem>
                <listitem>
                    <para><literal>Run</literal></para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Meg kell valósítanunk ezen metódusok mindegyikét azért, hogy képesek legyünk
végrehajtani a szolgáltató által kezelt műveletet
(<filename>Kernel/GenericInterface/Provider.pm</filename>).
        </para>
        <section id="operation_code_example">
            <title>Kódpélda</title>
            <para>
                Ebben a szakaszban egy minta műveletmodul lesz megjelenítve, és minden
szubrutin elmagyarázásra kerül.
            </para>
            <para>
                <programlisting><![CDATA[
# --
# Kernel/GenericInterface/Operation/Test/Test.pm - GenericInterface test operation backend
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::GenericInterface::Operation::Test::Test;

use strict;
use warnings;

use Kernel::System::VariableCheck qw(IsHashRefWithData);

our $ObjectManagerDisabled = 1;
                ]]></programlisting>
            </para>
            <para>
                Ez egy gyakori fejléc, amely megtalálható a szokásos OTRS modulokban. Az
osztály/csomag neve a <literal>package</literal> kulcsszón keresztül van
deklarálva.
            </para>
            <para>
                Felveszünk egy <literal>VariableCheck</literal> modult is bizonyos
ellenőrzések végrehajtásához néhány változón. A műveletek nem
példányosíthatók az objektumkezelővel.
            </para>
            <para>
                <programlisting><![CDATA[
sub new {
    my ( $Type, %Param ) = @_;

    my $Self = {};
    bless( $Self, $Type );

    # a szükséges objektumok ellenőrzése
    for my $Needed (qw(DebuggerObject)) {
        if ( !$Param{$Needed} ) {
            return {
                Success      => 0,
                ErrorMessage => "Nincs $Needed!"
            };
        }

        $Self->{$Needed} = $Param{$Needed};
    }

    return $Self;
}
                ]]></programlisting>
            </para>
            <para>
                A <literal>new</literal> konstruktor hozza létre az osztály új példányát. A
kódolási irányelvek szerint az objektumkezelő által nem kezelt más
osztályoknak csak azon objektumait kell a <literal>new</literal>
konstruktorban létrehozni, amelyek ebben a modulban szükségesek.
            </para>
            <para>
                <programlisting><![CDATA[
sub Run {
    my ( $Self, %Param ) = @_;

    # adatok ellenőrzése - csak meghatározatlant vagy kivonathivatkozást fogad el
    if ( defined $Param{Data} && ref $Param{Data} ne 'HASH' ) {

        return $Self->{DebuggerObject}->Error(
            Summary => 'Van adat, de az nem kivonathivatkozás a műveletteszt háttérprogramban!'
        );
    }

    if ( defined $Param{Data} && $Param{Data}->{TestError} ) {

        return {
            Success      => 0,
            ErrorMessage => "Hibaüzenet a következő hibakódhoz: $Param{Data}->{TestError}",
            Data         => {
                ErrorData => $Param{Data}->{ErrorData},
            },
        };
    }

    # adatok másolása
    my $ReturnData;

    if ( ref $Param{Data} eq 'HASH' ) {
        $ReturnData = \%{ $Param{Data} };
    }
    else {
        $ReturnData = undef;
    }

    # az eredmény visszaadása
    return {
        Success => 1,
        Data    => $ReturnData,
    };
}
                ]]></programlisting>
            </para>
            <para>
                A <literal>Run</literal> függvény az egyes műveletek fő része. Fogadja az
összes belsőleg leképezett adatot a távoli rendszertől, amelyre a
szolgáltatónak szüksége van a művelet végrehajtásához, végrehajtja a
műveletet, és visszaadja az eredményt a szolgáltatónak a külső leképezéshez,
valamint visszaszállítja a távoli rendszerhez.
            </para>
            <para>
                Ez a bizonyos példa ugyanúgy adja vissza az adatokat, ahogy azok a távoli
rendszertől jönnek, hacsak a <literal>TestError</literal> paraméter át nincs
adva. Ebben az esetben egy hibát ad vissza.
            </para>
        </section>
        <section id="operation-configuration">
            <title>Beállítási példa</title>
            <para>
                Szükség van ezen műveletmodul regisztrálására, hogy elérhető legyen az OTRS
grafikus felhasználói felületén. Ezt a lenti XML beállítás használatával
lehet megtenni.
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
<ConfigItem Name="GenericInterface::Operation::Module###Test::Test" Required="0" Valid="1">
    <Description Translatable="1">GenericInterface module registration for the operation layer.</Description>
    <Group>GenericInterface</Group>
    <SubGroup>GenericInterface::Operation::ModuleRegistration</SubGroup>
    <Setting>
        <Hash>
            <Item Key="Name">Test</Item>
            <Item Key="Controller">Test</Item>
            <Item Key="ConfigDialog">AdminGenericInterfaceOperationDefault</Item>
        </Hash>
    </Setting>
</ConfigItem>
                ]]></programlisting>
            </para>
        </section>
        <section id="operation-unittest">
            <title>Egységteszt példa</title>
            <para>
                Az általános felület műveleteinek egységtesztjei nem különböznek más
egységtesztektől, de fontolóra kell venni a helyi tesztelést, viszont egy
távoli kapcsolatot is szimulálni kell. Egy jó bevált gyakorlat mindkettőt
különválasztva tesztelni, mivel az eredmények némileg különbözők lehetnek.
            </para>
            <para>
                Ha többet szeretne megtudni az egységtesztekről, akkor vessen egy pillantást
az <link linkend="unit-tests">egységteszt fejezetre</link>.
            </para>
            <para>
                A következő csak a kezdési pont egy egységteszthez:
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
# --
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

## no critic (Modules::RequireExplicitPackage)
use strict;
use warnings;
use utf8;

use vars (qw($Self));

use Kernel::GenericInterface::Debugger;
use Kernel::GenericInterface::Operation::Test::Test;

use Kernel::System::VariableCheck qw(:all);

# Skip SSL certificate verification (RestoreDatabase must not be used in this test).
$Kernel::OM->ObjectParamAdd(
    'Kernel::System::UnitTest::Helper' => {
        SkipSSLVerify => 1,
    },
);
my $Helper = $Kernel::OM->Get('Kernel::System::UnitTest::Helper');

# get a random number
my $RandomID = $Helper->GetRandomNumber();

# create a new user for current test
my $UserLogin = $Helper->TestUserCreate(
    Groups => ['users'],
);
my $Password = $UserLogin;

my $UserID = $Kernel::OM->Get('Kernel::System::User')->UserLookup(
    UserLogin => $UserLogin,
);

# set web-service name
my $WebserviceName = '-Test-' . $RandomID;

# create web-service object
my $WebserviceObject = $Kernel::OM->Get('Kernel::System::GenericInterface::Webservice');
$Self->Is(
    'Kernel::System::GenericInterface::Webservice',
    ref $WebserviceObject,
    "Create web service object",
);

my $WebserviceID = $WebserviceObject->WebserviceAdd(
    Name   => $WebserviceName,
    Config => {
        Debugger => {
            DebugThreshold => 'debug',
        },
        Provider => {
            Transport => {
                Type => '',
            },
        },
    },
    ValidID => 1,
    UserID  => 1,
);
$Self->True(
    $WebserviceID,
    "Added Web Service",
);

# get remote host with some precautions for certain unit test systems
my $Host = $Helper->GetTestHTTPHostname();

my $ConfigObject = $Kernel::OM->Get('Kernel::Config');

# prepare web-service config
my $RemoteSystem =
    $ConfigObject->Get('HttpType')
    . '://'
    . $Host
    . '/'
    . $ConfigObject->Get('ScriptAlias')
    . '/nph-genericinterface.pl/WebserviceID/'
    . $WebserviceID;

my $WebserviceConfig = {
    Description =>
        'Test for Ticket Connector using SOAP transport backend.',
    Debugger => {
        DebugThreshold => 'debug',
        TestMode       => 1,
    },
    Provider => {
        Transport => {
            Type   => 'HTTP::SOAP',
            Config => {
                MaxLength => 10000000,
                NameSpace => 'http://otrs.org/SoapTestInterface/',
                Endpoint  => $RemoteSystem,
            },
        },
        Operation => {
            Test => {
                Type => 'Test::Test',
            },
        },
    },
    Requester => {
        Transport => {
            Type   => 'HTTP::SOAP',
            Config => {
                NameSpace => 'http://otrs.org/SoapTestInterface/',
                Encoding  => 'UTF-8',
                Endpoint  => $RemoteSystem,
            },
        },
        Invoker => {
            Test => {
                Type => 'Test::TestSimple'
                ,    # requester needs to be Test::TestSimple in order to simulate a request to a remote system
            },
        },
    },
};

# update web-service with real config
# the update is needed because we are using
# the WebserviceID for the Endpoint in config
my $WebserviceUpdate = $WebserviceObject->WebserviceUpdate(
    ID      => $WebserviceID,
    Name    => $WebserviceName,
    Config  => $WebserviceConfig,
    ValidID => 1,
    UserID  => $UserID,
);
$Self->True(
    $WebserviceUpdate,
    "Updated Web Service $WebserviceID - $WebserviceName",
);

# debugger object
my $DebuggerObject = Kernel::GenericInterface::Debugger->new(
    DebuggerConfig => {
        DebugThreshold => 'debug',
        TestMode       => 1,
    },
    WebserviceID      => $WebserviceID,
    CommunicationType => 'Provider',
);
$Self->Is(
    ref $DebuggerObject,
    'Kernel::GenericInterface::Debugger',
    'DebuggerObject instantiate correctly',
);

# define test cases
my @Tests = (
    {
        Name           => 'Test case name',
        SuccessRequest => 1,                  # 1 or 0
        RequestData    => {

            # ... add test data
        },
        ExpectedReturnLocalData => {
            Data => {

                # ... add expected local results
            },
            Success => 1,                     # 1 or 0
        },
        ExpectedReturnRemoteData => {
            Data => {

                # ... add expected remote results
            },
            Success => 1,                     # 1 or 0
        },
        Operation => 'Test',
    },

    # ... add more test cases
);

TEST:
for my $Test (@Tests) {

    # create local object
    my $LocalObject = "Kernel::GenericInterface::Operation::Test::$Test->{Operation}"->new(
        DebuggerObject => $DebuggerObject,
        WebserviceID   => $WebserviceID,
    );

    $Self->Is(
        "Kernel::GenericInterface::Operation::Test::$Test->{Operation}",
        ref $LocalObject,
        "$Test->{Name} - Create local object",
    );

    my %Auth = (
        UserLogin => $UserLogin,
        Password  => $Password,
    );
    if ( IsHashRefWithData( $Test->{Auth} ) ) {
        %Auth = %{ $Test->{Auth} };
    }

    # start requester with our web-service
    my $LocalResult = $LocalObject->Run(
        WebserviceID => $WebserviceID,
        Invoker      => $Test->{Operation},
        Data         => {
            %Auth,
            %{ $Test->{RequestData} },
        },
    );

    # check result
    $Self->Is(
        'HASH',
        ref $LocalResult,
        "$Test->{Name} - Local result structure is valid",
    );

    # create requester object
    my $RequesterObject = $Kernel::OM->Get('Kernel::GenericInterface::Requester');
    $Self->Is(
        'Kernel::GenericInterface::Requester',
        ref $RequesterObject,
        "$Test->{Name} - Create requester object",
    );

    # start requester with our web-service
    my $RequesterResult = $RequesterObject->Run(
        WebserviceID => $WebserviceID,
        Invoker      => $Test->{Operation},
        Data         => {
            %Auth,
            %{ $Test->{RequestData} },
        },
    );

    # check result
    $Self->Is(
        'HASH',
        ref $RequesterResult,
        "$Test->{Name} - Requester result structure is valid",
    );

    $Self->Is(
        $RequesterResult->{Success},
        $Test->{SuccessRequest},
        "$Test->{Name} - Requester successful result",
    );

    # ... add tests for the results
}

# delete web service
my $WebserviceDelete = $WebserviceObject->WebserviceDelete(
    ID     => $WebserviceID,
    UserID => $UserID,
);
$Self->True(
    $WebserviceDelete,
    "Deleted Web Service $WebserviceID",
);

# also delete any other added data during the this test, since RestoreDatabase must not be used.

1;
                ]]></programlisting>
            </para>
        </section>
        <section id="operation-wsdl">
            <title>WSDL-kiterjesztés példa</title>
            <para>
                A WSDL-fájlok tartalmazzák a webszolgáltatás és a SOAP-üzenethez tartozó
műveleteinek meghatározásait abban az esetben, a kibővítjük a
<filename>development/webservices/GenericTickeConnectorSOAP.wsdl</filename>
fájlt néhány helyen:
            </para>
            <para>
                Port típusa:
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
    <wsdl:portType name="GenericTicketConnector_PortType">
        <!-- ... -->
        <wsdl:operation name="Test">
            <wsdl:input message="tns:TestRequest"/>
            <wsdl:output message="tns:TestResponse"/>
        </wsdl:operation>
    <!-- ... -->
                ]]></programlisting>
            </para>
            <para>
                Kötés:
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
    <wsdl:binding name="GenericTicketConnector_Binding" type="tns:GenericTicketConnector_PortType">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <!-- ... -->
        <wsdl:operation name="Test">
            <soap:operation soapAction="http://www.otrs.org/TicketConnector/Test"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <!-- ... -->
    </wsdl:binding>
                ]]></programlisting>
            </para>
            <para>
                Típus:
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
    <wsdl:types>
        <xsd:schema targetNamespace="http://www.otrs.org/TicketConnector/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <!-- ... -->
            <xsd:element name="Test">
                <xsd:complexType>
                    <xsd:sequence>
                            <xsd:element minOccurs="0" name="Param1" type="xsd:string"/>
                            <xsd:element minOccurs="0" name="Param2" type="xsd:positiveInteger"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="TestResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element maxOccurs="unbounded" minOccurs="1" name="Attribute1" type="xsd:string"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        <!-- ... -->
        </xsd:schema>
    </wsdl:types>
                ]]></programlisting>
            </para>
            <para>
                Üzenet:
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
    <!-- ... -->
    <wsdl:message name="TestRequest">
        <wsdl:part element="tns:Test" name="parameters"/>
    </wsdl:message>
    <wsdl:message name="TestResponse">
        <wsdl:part element="tns:TestResponse" name="parameters"/>
    </wsdl:message>
    <!-- ... -->
                ]]></programlisting>
            </para>
        </section>
        <section id="operation-wadl">
            <title>WADL-kiterjesztés példa</title>
            <para>
                A WADL-fájlok tartalmazzák a webszolgáltatás és a REST-felülethez tartozó
műveleteinek meghatározásait. Adjon hozzá egy új erőforrást a
<filename>development/webservices/GenericTickeConnectorREST.wadl</filename>fájlhoz.
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
  <resources base="http://localhost/otrs/nph-genericinterface.pl/Webservice/GenericTicketConnectorREST">
    <!-- ... -->
    <resource path="Test" id="Test">
      <doc xml:lang="en" title="Test"/>
        <param name="Param1" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <param name="Param2" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="GET" id="GET_Test">
          <doc xml:lang="en" title="GET_Test"/>
          <request/>
          <response status="200">
            <representation mediaType="application/json; charset=UTF-8"/>
          </response>
        </method>
      </resource>
    </resource>
    <!-- ... -->
  </resources>
                ]]></programlisting>
            </para>
        </section>
        <section id="operation-soap">
            <title>Webszolgáltatás SOAP-kiterjesztés példa</title>
            <para>
                A webszolgáltatások importálhatók az OTRS-be egy előre meghatározott
szerkezettel rendelkező YAML-fájllal. Ebben az esetben a
<filename>development/webservices/GenericTickeConnectorSOAP.yml</filename>
fájlt bővítjük ki egy SOAP webszolgáltatáshoz.
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
Provider:
  Operation:
    # ...
    Test:
      Description: Ez csak egy teszt
      MappingInbound: {}
      MappingOutbound: {}
      Type: Test::Test
                ]]></programlisting>
            </para>
        </section>
        <section id="operation-rest">
            <title>Webszolgáltatás REST-kiterjesztés példa</title>
            <para>
                A webszolgáltatások importálhatók az OTRS-be egy előre meghatározott
szerkezettel rendelkező YAML-fájllal. Ebben az esetben a
<filename>development/webservices/GenericTickeConnectorREST.yml</filename>
fájlt bővítjük ki egy REST webszolgáltatáshoz.
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
Provider:
  Operation:
    # ...
    Test:
      Description: Ez csak egy teszt
      MappingInbound: {}
      MappingOutbound: {}
      Type: Test::Test
  # ...
  Transport:
    Config:
      # ...
      RouteOperationMapping:
        # ..
        Test:
          RequestMethod:
          - GET
          Route: /Test
                ]]></programlisting>
            </para>
        </section>
    </section>
</section>
