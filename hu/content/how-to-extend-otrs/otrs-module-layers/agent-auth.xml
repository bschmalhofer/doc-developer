<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">


<section id="agent-auth-module">
    <title>Ügyintézői hitelesítő modul</title>
    <para>
        Számos ügyintézői hitelesítő modul létezik (DB, LDAP és HTTPBasicAuth),
amelyek az OTRS keretrendszerrel érkeznek. Lehetőség van saját hitelesítő
modulok fejlesztésére is. Az ügyintézői hitelesítő modulok a
<filename>Kernel/System/Auth/*.pm</filename> alatt találhatók. Ezek
beállításáról további információkért nézze meg az adminisztrátori
kézikönyvet. Ezt követően egy egyszerű ügyintézői hitelesítő modul példája
található. Mentse el a <filename>Kernel/System/Auth/Simple.pm</filename>
helyre. Mindössze három függvényre van szüksége: <code>new()</code>,
<code>GetOption()</code> és <code>Auth()</code>. Adja vissza az uid-t, és
ezután a hitelesítés rendben van.
    </para>
    <section id="agent-auth-module-code">
        <title>Kódpélda</title>
        <para>
            A felületosztály neve <literal>Kernel::System::Auth</literal>. A példa
ügyintézői hitelesítés hívható
<literal>Kernel::System::Auth::CustomAuth</literal> néven. Lent találhat egy
példát.
        </para>
        <para>
        <programlisting linenumbering="numbered"><![CDATA[
# --
# Kernel/System/Auth/CustomAuth.pm - provides the CustomAuth authentication
# based on Martin Edenhofer's Kernel::System::Auth::DB
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# ID: CustomAuth.pm,v 1.1 2010/05/10 15:30:34 fk Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::System::Auth::CustomAuth;

use strict;
use warnings;

use Authen::CustomAuth;

sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {};
    bless( $Self, $Type );

    # check needed objects
    for (qw(LogObject ConfigObject DBObject)) {
        $Self->{$_} = $Param{$_} || die "No $_!";
    }

    # Debug 0=off 1=on
    $Self->{Debug} = 0;

    # get config
    $Self->{Die} = $Self->{ConfigObject}->Get( 'AuthModule::CustomAuth::Die' . $Param{Count} );

    # get user table
    $Self->{CustomAuthHost} = $Self->{ConfigObject}->Get( 'AuthModule::CustomAuth::Host' . $Param{Count} )
        || die "Need AuthModule::CustomAuth::Host$Param{Count}.";
    $Self->{CustomAuthSecret}
        = $Self->{ConfigObject}->Get( 'AuthModule::CustomAuth::Password' . $Param{Count} )
        || die "Need AuthModule::CustomAuth::Password$Param{Count}.";

    return $Self;
}

sub GetOption {
    my ( $Self, %Param ) = @_;

    # check needed stuff
    if ( !$Param{What} ) {
        $Self->{LogObject}->Log( Priority => 'error', Message => "Need What!" );
        return;
    }

    # module options
    my %Option = ( PreAuth => 0, );

    # return option
    return $Option{ $Param{What} };
}

sub Auth {
    my ( $Self, %Param ) = @_;

    # check needed stuff
    if ( !$Param{User} ) {
        $Self->{LogObject}->Log( Priority => 'error', Message => "Need User!" );
        return;
    }

    # get params
    my $User       = $Param{User}      || '';
    my $Pw         = $Param{Pw}        || '';
    my $RemoteAddr = $ENV{REMOTE_ADDR} || 'Got no REMOTE_ADDR env!';
    my $UserID     = '';
    my $GetPw      = '';

    # just in case for debug!
    if ( $Self->{Debug} > 0 ) {
        $Self->{LogObject}->Log(
            Priority => 'notice',
            Message  => "User: '$User' tried to authenticate with Pw: '$Pw' ($RemoteAddr)",
        );
    }

    # just a note
    if ( !$User ) {
        $Self->{LogObject}->Log(
            Priority => 'notice',
            Message  => "No User given!!! (REMOTE_ADDR: $RemoteAddr)",
        );
        return;
    }

    # just a note
    if ( !$Pw ) {
        $Self->{LogObject}->Log(
            Priority => 'notice',
            Message  => "User: $User authentication without Pw!!! (REMOTE_ADDR: $RemoteAddr)",
        );
        return;
    }

    # Create a RADIUS object
    my $CustomAuth = Authen::CustomAuth->new(
        Host   => $Self->{CustomAuthHost},
        Secret => $Self->{CustomAuthecret},
    );
    if ( !$CustomAuth ) {
        if ( $Self->{Die} ) {
            die "Can't connect to $Self->{CustomAuthHost}: $@";
        }
        else {
            $Self->{LogObject}->Log(
                Priority => 'error',
                Message  => "Can't connect to $Self->{CustomAuthHost}: $@",
            );
            return;
        }
    }
    my $AuthResult = $CustomAuth->check_pwd( $User, $Pw );

    # login note
    if ( defined($AuthResult) && $AuthResult == 1 ) {
        $Self->{LogObject}->Log(
            Priority => 'notice',
            Message  => "User: $User authentication ok (REMOTE_ADDR: $RemoteAddr).",
        );
        return $User;
    }

    # just a note
    else {
        $Self->{LogObject}->Log(
            Priority => 'notice',
            Message  => "User: $User authentication with wrong Pw!!! (REMOTE_ADDR: $RemoteAddr)"
        );
        return;
    }
}

1;

        ]]></programlisting>
        </para>
    </section>
    <section id="agent-auth-module-configuration">
        <title>Beállítási példa</title>
        <para>
            Szükség van az egyéni ügyintézői hitelesítés modul bekapcsolására. Ezt a
lenti Perl beállítás használatával lehet megtenni. Nem ajánlott az XML
beállítás használata, mert kizárhatja magát a rendszerbeállításokon
keresztül.
        </para>
        <para>
        <programlisting linenumbering="numbered"><![CDATA[
            $Self->{'AuthModule'} = 'Kernel::System::Auth::CustomAuth';
        ]]></programlisting>
        </para>
    </section>
    <section id="agent-auth-module-use_cases">
        <title>Használati eset példa</title>
        <para>
            Egy hitelesítési megvalósítás hasznos példája lehet egy SOAP háttérprogram.
        </para>
    </section>
    <section id="agent-auth-module-releases">
        <title>Kiadási elérhetőség</title>
        <para>
        <informaltable>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Név</entry>
                        <entry>Kiadás</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>DB</entry>
                        <entry>1.0</entry>
                    </row>
                    <row>
                        <entry>HTTPBasicAuth</entry>
                        <entry>1.2</entry>
                    </row>
                    <row>
                        <entry>LDAP</entry>
                        <entry>1.0</entry>
                    </row>
                    <row>
                        <entry>RADIUS</entry>
                        <entry>1.3</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        </para>
    </section>
</section>
