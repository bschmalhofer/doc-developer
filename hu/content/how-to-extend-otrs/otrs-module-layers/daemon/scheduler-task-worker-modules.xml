<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="scheduler-overview">
    <title>OTRS ütemező</title>
    <para>
        Az OTRS ütemező a démonmodulok és a feladatelvégzők együttese, amelyek
együtt futnak azért, hogy az összes szükséges OTRS feladatot aszinkron módon
végrehajtsák a webkiszolgáló folyamatából.
    </para>
    <section id="scheduler-task-managers">
        <title>OTRS ütemező feladatkezelők</title>
        <para>
            A <literal>SchedulerCronTaskManager</literal> kiolvassa a regisztrált
cron-feladatokat az OTRS rendszerbeállításaiból, és meghatározza a helyes
időt a végrehajtandó feladat létrehozásához.
        </para>
        <para>
            A <literal>SchedulerFutureTaskManager</literal> ellenőrzi azokat a
feladatokat, amelyek úgy vannak beállítva, hogy csak egy alkalommal fussanak
a jövőben, és beállítja, hogy a feladat időben kerüljön
végrehajtásra. Például amikor egy általános felület meghívónak nem sikerül
elérnie a távoli kiszolgálót, akkor ütemezni tudja magát, hogy 5 perccel
később újra fusson.
        </para>
        <para>
            A <literal>SchedulerGenericAgentTaskManager</literal> folyamatosan olvassa a
<literal>GenericAgent</literal> feladatot, amely rendszeres időközönkénti
futáshoz van beállítva, és annak megfelelően állítja be azok végrehajtását.
        </para>
        <para>
            Amikor ezek a feladatkezelők nem elegendőek, akkor egy új démonmodul hozható
létre. Egy feladat regisztrálásához a <literal>Run()</literal> metódusuk egy
bizonyos pontján meg kell hívni a <literal>TaskAdd()</literal> függvényt a
<literal>chedulerDB</literal> objektumból, és amint regisztrálva lett, akkor
a <literal>SchedulerTaskWorker</literal> végrehajtja a következő szabad
időszeletben.
        </para>
    </section>
    <section id="scheduler-task-workers">
        <title>OTRS ütemező feladatelvégzők</title>
            <para>
                A <literal>SchedulerTaskWorker</literal> az aszinkron végrehajtó
használatával végrehajtja az előző feladatkezelő által tervezett összes
feladatot, és még azokat is, amelyek közvetlenül a kódból jönnek.
            </para>
            <para>
                Annak érdekében, hogy az összes feladatot végrehajtsa, a
<literal>SchedulerTaskWorker</literal> meghív egy háttérprogram-modult
(feladatelvégzőt) az adott feladat végrehajtásához. Az elvégző modult a
feladat típusa határozza meg. Ha új feladattípus kerül hozzáadásra, akkor az
új feladatelvégzőt is igényel.
            </para>

            <section id="creating-new-scheduler-task-worker">
                <title>Új ütemező feladatelvégző létrehozása</title>
                <para>
                    A
<filename>Kernel/System/Daemon/DaemonModules/SchedulerTaskWorker</filename>
mappa alatt elhelyezett összes fájl lehet potenciális feladatelvégző, és
azok nem igényelnek semmilyen regisztrációt a rendszerbeállításokban.
                </para>
                <section id="scheduler-task-worker-code-example">
                    <title>Ütemező feladatelvégző kódpélda</title>
                    <para>
                        <programlisting><![CDATA[
# --
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::System::Daemon::DaemonModules::SchedulerTaskWorker::TestWorker;

use strict;
use warnings;

use parent qw(Kernel::System::Daemon::DaemonModules::BaseTaskWorker);

our @ObjectDependencies = (
    'Kernel::System::Log',
);
                        ]]></programlisting>
                    </para>
                    <para>
                        Ez egy gyakori fejléc, amely megtalálható a legtöbb OTRS modulban. Az
osztály/csomag neve a <literal>package</literal> kulcsszón keresztül van
deklarálva.
                    </para>
                    <para>
                        Ebben az esetben a <literal>BaseTaskWorker</literal> osztályból
származtatunk le, és az objektumkezelő függőségei be vannak állítva.
                    </para>
                    <para>
                        <programlisting><![CDATA[
sub new {
    my ( $Type, %Param ) = @_;

    my $Self = {};
    bless( $Self, $Type );

    $Self->{Debug}      = $Param{Debug};
    $Self->{WorkerName} = 'Worker: Test';

    return $Self;
}
                        ]]></programlisting>
                    </para>
                    <para>
                        A <literal>new</literal> konstruktor hozza létre az osztály új példányát.
                    </para>
                    <para>
                        <programlisting><![CDATA[
sub Run {
    my ( $Self, %Param ) = @_;

    # Feladatparaméterek ellenőrzése.
    my $CheckResult = $Self->_CheckTaskParams(
        %Param,
        NeededDataAttributes => [ 'NeededAtrribute1', 'NeededAtrribute2' ],
        DataParamsRef        => 'HASH', # vagy 'ARRAT'
    );

    # Végrehajtás leállítása, ha hiba található a paraméterekben.
    return if !$CheckResult;

    my $Success;
    my $ErrorMessage;

    if ( $Self->{Debug} ) {
        print "    $Self->{WorkerName} végrehajtja a feladatot: $Param{TaskName}\n";
    }

    do {

        # A szabványos hiba lokalizálása.
        local *STDERR;

        # A szabványos hiba átirányítása egy változóba.
        open STDERR, ">>", \$ErrorMessage;

        $Success = $Kernel::OM->Get('Kernel::System::MyPackage')->Run(
            Param1 => 'someparam',
        );
    };

    if ( !$Success ) {

        $ErrorMessage ||= "$Param{TaskName} végrehajtása sikertelen egy hibaüzenettel!";

        $Self->_HandleError(
            TaskName     => $Param{TaskName},
            TaskType     => 'Test',
            LogMessage   => "Hiba történt a(z) $Param{TaskName} végrehajtásakor: $ErrorMessage",
            ErrorMessage => "$ErrorMessage",
        );
    }

    return $Success;
}
                        ]]></programlisting>
                    </para>
                    <para>
                        A <literal>Run</literal> a fő metódus. Egy
<literal>_CheckTaskParams()</literal> hívás az alaposztályból megspórol
néhány kódsort. A feladat végrehajtása a szabványos hibakimenet megszerzése
közben nagyon jó gyakorlat, mivel az OTRS ütemező normális esetben
felügyelet nélkül fut, és az összes hiba egy változóba történő mentése
lehetővé fogja tenni a későbbi feldolgozást. A
<literal>_HandleError()</literal> közös felületet biztosít a hibaüzenetek
e-mailben történő küldéséhez a rendszerbeállításokban megadott címzetteknek.
                    </para>
                    <para>
                        <programlisting><![CDATA[
1;
                        ]]></programlisting>
                    </para>
                    <para>
                        Fájl vége.
                    </para>
                </section>
        </section>
    </section>
</section>
