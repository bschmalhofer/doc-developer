<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="invoker">
    <title>Meghívó</title>
    <para>
        A meghívót arra használják, hogy egy kérést hozzon létre az OTRS-ből egy
távoli rendszerhez. Az általános ügyintéző ezen része felelős a szükséges
feladatok végrehajtásáért az OTRS oldalán, illetve a szükséges adatok
begyűjtéséért a kérés felépítésének érdekében.
    </para>
    <section id="adding_invoker">
        <title>Meghívó háttérprogram</title>
        <para>
            Ezután be fogjuk mutatni, hogy hogyan kell egy új meghívót
kifejleszteni. Minden egyes meghívónak meg kell valósítania ezeket a
szubrutinokat:
        </para>
        <para>
            <itemizedlist mark="round">
                <listitem>
                    <para><literal>new</literal></para>
                </listitem>
                <listitem>
                    <para><literal>PrepareRequest</literal></para>
                </listitem>
                <listitem>
                    <para><literal>HandleResponse</literal></para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Meg kell valósítanunk ezen metódusok mindegyikét azért, hogy képesek legyünk
végrehajtani egy kérést a kéréskezelő használatával
(<filename>Kernel/GenericInterface/Requester.pm</filename>).
        </para>
        <section id="invoker_code_example">
            <title>Kódpélda</title>
            <para>
                Ebben a szakaszban egy minta meghívómodul lesz megjelenítve, és minden
szubrutin elmagyarázásra kerül.
            </para>
            <para>
                <programlisting><![CDATA[
# --
# Kernel/GenericInterface/Invoker/Test.pm - GenericInterface test data Invoker backend
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::GenericInterface::Invoker::Test::Test;

use strict;
use warnings;

use Kernel::System::VariableCheck qw(IsString IsStringWithData);

# prevent 'Used once' warning for Kernel::OM
use Kernel::System::ObjectManager;

our $ObjectManagerDisabled = 1;
                ]]></programlisting>
            </para>
            <para>
                Ez egy gyakori fejléc, amely megtalálható a szokásos OTRS modulokban. Az
osztály/csomag neve a <literal>package</literal> kulcsszón keresztül van
deklarálva. A meghívók nem példányosíthatók az objektumkezelővel.
            </para>
            <para>
                <programlisting><![CDATA[
sub new {
    my ( $Type, %Param ) = @_;

    # új kivonat lefoglalása az objektumhoz
    my $Self = {};
    bless( $Self, $Type );

    # a szükséges paraméterek ellenőrzése
    if ( !$Param{DebuggerObject} ) {
        return {
            Success      => 0,
            ErrorMessage => "Nem sikerült lekérni a hibakezelő objektumot!"
        };
    }

    $Self->{DebuggerObject} = $Param{DebuggerObject};

    return $Self;
}
                ]]></programlisting>
            </para>
            <para>
                A <literal>new</literal> konstruktor hozza létre az osztály új példányát. A
kódolási irányelvek szerint az objektumkezelő által nem kezelt más
osztályoknak csak azon objektumait kell a <literal>new</literal>
konstruktorban létrehozni, amelyek ebben a modulban szükségesek.
            </para>
            <para>
                <programlisting><![CDATA[
sub PrepareRequest {
    my ( $Self, %Param ) = @_;

    # szükségünk van egy jegyszámra
    if ( !IsStringWithData( $Param{Data}->{TicketNumber} ) ) {
        return $Self->{DebuggerObject}->Error( Summary => 'Nem kaptunk jegyszámot' );
    }

    my %ReturnData;

    $ReturnData{TicketNumber} = $Param{Data}->{TicketNumber};

    # a művelet ellenőrzése
    if ( IsStringWithData( $Param{Data}->{Action} ) ) {
        $ReturnData{Action} = $Param{Data}->{Action} . 'Test';
    }

    # a rendszeridő kérésének ellenőrzése
    if ( IsStringWithData( $Param{Data}->{GetSystemTime} ) && $Param{Data}->{GetSystemTime} ) {
        $ReturnData{SystemTime} = $Kernel::OM->Get('Kernel::System::Time')->SystemTime();
    }

    return {
        Success => 1,
        Data    => \%ReturnData,
    };
}
                ]]></programlisting>
            </para>
            <para>
                A <literal>PrepareRequest</literal> függvényt használják a kérésbe küldendő
összes szükséges adat kezeléséhez és összegyűjtéséhez. Itt fogadhatunk
adatokat a kéréskezelőtől, használhatjuk azokat, kiterjeszthetjük azokat, új
adatokat állíthatunk elő, és ezután átvihetjük az eredményeket a leképező
réteghez.
            </para>
            <para>
                Ennél a példánál azt várjuk, hogy kapunk egy jegyszámot. Ha nem, akkor az
<code>Error()</code> hibakeresési metódust használjuk, amely létrehoz egy
bejegyzést a hibakeresési naplóban, és visszaad egy szerkezetet is a
<literal>Success</literal> paraméterrel 0-ként, és egy hibaüzenetet az
átadott <literal>Summary</literal> értékként.
            </para>
            <para>
                Ez a példa hozzáfűzi a „Test” szót is az <literal>Action</literal>
paraméterhez, és ha a <literal>GetSystemTime</literal> kérve volt, akkor ki
fogja tölteni a <literal>SystemTime</literal> paramétert az aktuális
rendszeridővel. A kód ezen része azért van, hogy előkészítse az elküldendő
adatokat. Egy valódi meghívónál itt kell elvégezni néhány hívást az
alapmodulokhoz (<filename>Kernel/System/*.pm</filename>).
            </para>
            <para>
                Ha a kérést a <literal>PrepareRequest</literal> függvény bármely része
közben le kell állítani a hibakeresési naplóba való bejegyzés előállítása és
hibajelzése nélkül, akkor a következő kód használható:
            </para>
            <para>
                <programlisting><![CDATA[
# a kérelmező kommunikációjának leállítása
return {
    Success           => 1,
    StopCommunication => 1,
};
                ]]></programlisting>
            </para>
            <para>
                Ennek használatával a kérelmező meg foga érteni, hogy a kérést nem szabad
folytatni (nem kerül elküldésre a leképező réteghez, és nem kerül elküldésre
a hálózati átvitelhez sem). A kérelmező nem fog hibát küldeni a hibakeresési
naplóba, hanem csak csendben le fog állni.
            </para>
            <para>
                <programlisting><![CDATA[
sub HandleResponse {
    my ( $Self, %Param ) = @_;

    # ha hiba volt a válaszban, akkor továbbítja
    if ( !$Param{ResponseSuccess} ) {
        if ( !IsStringWithData( $Param{ResponseErrorMessage} ) ) {

            return $Self->{DebuggerObject}->Error(
                Summary => 'Hiba volt a válaszban, de nincs válasz hibaüzenet!',
            );
        }

        return {
            Success      => 0,
            ErrorMessage => $Param{ResponseErrorMessage},
        };
    }

    # szükségünk van egy jegyszámra
    if ( !IsStringWithData( $Param{Data}->{TicketNumber} ) ) {

        return $Self->{DebuggerObject}->Error( Summary => 'Nem kaptunk jegyszámot!' );
    }

    # a jegyszám előkészítése
    my %ReturnData = (
        TicketNumber => $Param{Data}->{TicketNumber},
    );

    # a művelet ellenőrzése
    if ( IsStringWithData( $Param{Data}->{Action} ) ) {
        if ( $Param{Data}->{Action} !~ m{ \A ( .*? ) Test \z }xms ) {

            return $Self->{DebuggerObject}->Error(
                Summary => 'Kaptunk műveletet, nem az nem megfelelő formátumú!',
            );
        }
        $ReturnData{Action} = $1;
    }

    return {
        Success => 1,
        Data    => \%ReturnData,
    };
}
                ]]></programlisting>
            </para>
            <para>
                A <literal>HandleResponse</literal> függvényt használják az előző kérésből
származó adatok fogadásához és feldolgozásához, amelyet a távoli rendszernek
készítettek. Ezeket az adatokat már átadta a leképező réteg, hogy átalakítsa
azokat a távoli rendszer formátumáról az OTRS formátumára (ha szükséges).
            </para>
            <para>
                Ennél a bizonyos példánál ismét ellenőrzi a jegyszámot, és azt is ellenőrzi,
hogy a művelet a „Test” szóval végződik-e (amint az a
<literal>PrepareRequest</literal> függvényben történt).
            </para>
            <note>
                <para>
                    Ez a meghívó csak tesztelésekhez van, egy valódi meghívó ellenőrizni fogja,
hogy a válasz a távoli rendszer által leírt formátumban volt-e, és
végrehajthat néhány műveletet, mint például: egy másik meghívó meghívása,
egy hívás végrehajtása egy alapmodulhoz, az adatbázis frissítése, hiba
küldése, stb.
                </para>
            </note>
        </section>
        <section id="invoker-configuration">
            <title>Beállítási példa</title>
            <para>
                Szükség van ezen meghívómodul regisztrálására, hogy elérhető legyen az OTRS
grafikus felhasználói felületén. Ezt a lenti XML beállítás használatával
lehet megtenni.
            </para>
            <para>
                <programlisting linenumbering="numbered"><![CDATA[
<ConfigItem Name="GenericInterface::Invoker::Module###Test::Test" Required="0" Valid="1">
    <Description Translatable="1">GenericInterface module registration for the invoker layer.</Description>
    <Group>GenericInterface</Group>
    <SubGroup>GenericInterface::Invoker::ModuleRegistration</SubGroup>
    <Setting>
        <Hash>
            <Item Key="Name">Test</Item>
            <Item Key="Controller">Test</Item>
            <Item Key="ConfigDialog">AdminGenericInterfaceInvokerDefault</Item>
        </Hash>
    </Setting>
</ConfigItem>
                ]]></programlisting>
            </para>
        </section>
    </section>
</section>
