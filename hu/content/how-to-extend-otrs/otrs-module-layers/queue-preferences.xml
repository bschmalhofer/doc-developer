<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">


<section id="queue-preferences-module">
    <title>Várólista beállítások modul</title>
    <para>
        Létezik egy DB várólista beállítások modul, amely az OTRS keretrendszerrel
érkezik. Lehetőség van saját várólista beállítási modulok fejlesztésére
is. A várólista beállítási modulok a
<filename>Kernel/System/Queue/*.pm</filename> alatt találhatók. Ezek
beállításáról további információkért nézze meg az adminisztrátori
kézikönyvet. A következőkben egy várólista beállítások modul példája
található. Mentse el a
<filename>Kernel/System/Queue/PreferencesCustom.pm</filename>
helyre. Mindössze három függvényre van szüksége: <code>new()</code>,
<code>QueuePreferencesSet()</code> és
<code>QueuePreferencesGet()</code>. Adjon vissza 1-et, és ezután a
szinkronizáció rendben van.
    </para>
    <section id="queue-preferences-module-code">
        <title>Kódpélda</title>
        <para>
            A felületosztály neve <literal>Kernel::System::Queue</literal>. A példa
várólista beállítások hívhatók
<literal>Kernel::System::Queue::PreferencesCustom</literal> néven. Lent
találhat egy példát.
        </para>
        <para>
        <programlisting linenumbering="numbered"><![CDATA[
# --
# Kernel/System/Queue/PreferencesCustom.pm - some user functions
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# Id: PreferencesCustom.pm,v 1.5 2009/02/16 11:47:34 tr Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

package Kernel::System::Queue::PreferencesCustom;

use strict;
use warnings;

use vars qw(@ISA $VERSION);

sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {};
    bless( $Self, $Type );

    # check needed objects
    for (qw(DBObject ConfigObject LogObject)) {
        $Self->{$_} = $Param{$_} || die "Got no $_!";
    }

    # preferences table data
    $Self->{PreferencesTable}        = 'queue_preferences';
    $Self->{PreferencesTableKey}     = 'preferences_key';
    $Self->{PreferencesTableValue}   = 'preferences_value';
    $Self->{PreferencesTableQueueID} = 'queue_id';

    return $Self;
}

sub QueuePreferencesSet {
    my ( $Self, %Param ) = @_;

    # check needed stuff
    for (qw(QueueID Key Value)) {
        if ( !defined( $Param{$_} ) ) {
            $Self->{LogObject}->Log( Priority => 'error', Message => "Need $_!" );
            return;
        }
    }

    # delete old data
    return if !$Self->{DBObject}->Do(
        SQL => "DELETE FROM $Self->{PreferencesTable} WHERE "
            . "$Self->{PreferencesTableQueueID} = ? AND $Self->{PreferencesTableKey} = ?",
        Bind => [ \$Param{QueueID}, \$Param{Key} ],
    );

    $Self->{PreferencesTableValue} .= 'PreferencesCustom';

    # insert new data
    return $Self->{DBObject}->Do(
        SQL => "INSERT INTO $Self->{PreferencesTable} ($Self->{PreferencesTableQueueID}, "
            . " $Self->{PreferencesTableKey}, $Self->{PreferencesTableValue}) "
            . " VALUES (?, ?, ?)",
        Bind => [ \$Param{QueueID}, \$Param{Key}, \$Param{Value} ],
    );
}

sub QueuePreferencesGet {
    my ( $Self, %Param ) = @_;

    # check needed stuff
    for (qw(QueueID)) {
        if ( !$Param{$_} ) {
            $Self->{LogObject}->Log( Priority => 'error', Message => "Need $_!" );
            return;
        }
    }

    # check if queue preferences are available
    if ( !$Self->{ConfigObject}->Get('QueuePreferences') ) {
        return;
    }

    # get preferences
    return if !$Self->{DBObject}->Prepare(
        SQL => "SELECT $Self->{PreferencesTableKey}, $Self->{PreferencesTableValue} "
            . " FROM $Self->{PreferencesTable} WHERE $Self->{PreferencesTableQueueID} = ?",
        Bind => [ \$Param{QueueID} ],
    );
    my %Data;
    while ( my @Row = $Self->{DBObject}->FetchrowArray() ) {
        $Data{ $Row[0] } = $Row[1];
    }

    # return data
    return %Data;
}

1;

        ]]></programlisting>
        </para>
    </section>
    <section id="queue-preferences-module-configuration">
        <title>Beállítási példa</title>
        <para>
            Szükség van az egyéni várólista beállítások modul bekapcsolására. Ezt a
lenti XML beállítás használatával lehet megtenni.
        </para>
        <para>
        <programlisting linenumbering="numbered"><![CDATA[
<ConfigItem Name="Queue::PreferencesModule" Required="1" Valid="1">
    <Description Lang="en">Default queue preferences module.</Description>
    <Description Lang="hu">Alapértelmezett várólista beállítások modul.</Description>
    <Group>Ticket</Group>
    <SubGroup>Frontend::Queue::Preferences</SubGroup>
    <Setting>
        <String Regex="">Kernel::System::Queue::PreferencesCustom</String>
    </Setting>
</ConfigItem>
        ]]></programlisting>
        </para>
    </section>
    <section id="queue-preferences-module-use_cases">
        <title>Használati eset példák</title>
        <para>
            Hasznos beállítások megvalósítás lehet egy SOAP vagy egy RADIUS
háttérprogram.
        </para>
    </section>
    <section id="queue-preferences-module-releases">
        <title>Kiadási elérhetőség</title>
        <para>
        <informaltable>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Név</entry>
                        <entry>Kiadás</entry>
                    </row>
                </thead>
            <tbody>
                    <row>
                        <entry>PreferencesDB</entry>
                        <entry>2.3</entry>
                    </row>
            </tbody>
            </tgroup>
        </informaltable>
        </para>
    </section>
</section>
