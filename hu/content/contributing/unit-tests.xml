<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="unit-tests">
    <title>Egységtesztek</title>
    <para>
        Az OTRS biztosít egy tesztelési alkalmazáscsomagot, amely egységtesztek
fejlesztéséhez és futtatásához használható az összes rendszerrel kapcsolatos
kódnál.
    </para>

    <section id="testing">
        <title>Egy tesztfájl létrehozása</title>
        <para>
            A tesztfájlok .t fájlokban vannak tárolva a
<filename>/scripts/test/*.t</filename> helyen. Például vessünk egy
pillantást a <filename>scripts/test/Calendar.t</filename> fájlra a naptár
osztálynál.
        </para>
        <para>
            Minden tesztfájlnak ideális esetben példányosítania kell az egységteszt
segítő objektumot az elején, így részesülhet néhány beépített metódusból,
amelyet az biztosít:
        </para>
        <para>
            <programlisting><![CDATA[
# --
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

use strict;
use warnings;
use utf8;

use vars (qw($Self));

$Kernel::OM->ObjectParamAdd(
    'Kernel::System::UnitTest::Helper' => {
        RestoreDatabase => 1,
    },
);
my $Helper = $Kernel::OM->Get('Kernel::System::UnitTest::Helper');
            ]]></programlisting>
        </para>
        <para>
            A <literal>RestoreDatabase</literal> paraméternek a segítő konstruktor
számára történő átadásával az egységteszt közben végrehajtott bármely
adatbázis-utasítás vissza lesz állítva a végén, ezáltal azt biztosítva, hogy
ne történjen végleges változtatás.
        </para>
        <para>
            Mint bármely egyéb tesztelési alkalmazáscsomag, az OTRS is biztosít állítás
metódusokat, amelyek a feltételek teszteléséhez használhatók. Például it az
látható, hogy hogyan hozunk létre egy teszt felhasználót, és hogyan
teszteljük le, hogy valóban létrejött:
        </para>
        <para>
            <programlisting><![CDATA[
my $UserLogin = $Helper->TestUserCreate();
my $UserID = $UserObject->UserLookup( UserLogin => $UserLogin );

$Self->True(
    $UserID,
    "Test user $UserID created"
);
            ]]></programlisting>
        </para>
        <para>
            Nézze meg a lenti API szakaszt az állítás metódusok teljes listájáért.
        </para>
        <para>
            Mindig jó gyakorlat véletlenszerű adatokat létrehozni az egységtesztekben,
ami segíthet megkülönböztetni az előzőleg hozzáadott adatoktól. Használja a
véletlen metódusokat az API-ból, hogy megkapja a karakterláncokat, és
beágyazza azokat a paraméterekbe:
        </para>
        <para>
            <programlisting><![CDATA[
my $RandomID = $Helper->GetRandomID();

# teszt csoport létrehozása
my $GroupName = 'test-calendar-group-' . $RandomID;
my $GroupID   = $GroupObject->GroupAdd(
    Name    => $GroupName,
    ValidID => 1,
    UserID  => 1,
);

$Self->True(
    $GroupID,
    "Test group $GroupID created"
);
            ]]></programlisting>
        </para>
        <para>
            A jó fejlesztők az egységtesztjeiket könnyen karbantarthatóvá
teszik. Fontolja meg az összes teszteset egy tömbbe történő elhelyezését,
majd lépkedjen végig azokon valamilyen kóddal. Ez egyszerű módot fog
biztosítani a teszt későbbi bővítéséhez:
        </para>
        <para>
            <programlisting><![CDATA[
#
# A CalendarCreate() tesztelése
#
my @Tests = (
    {
        Name    => 'CalendarCreate - No params',
        Config  => {},
        Success => 0,
    },
    {
        Name   => 'CalendarCreate - All required parameters',
        Config => {
            CalendarName => "Calendar-$RandomID",
            Color        => '#3A87AD',
            GroupID      => $GroupID,
            UserID       => $UserID,
        },
        Success => 1,
    },
    {
        Name   => 'CalendarCreate - Same name',
        Config => {
            CalendarName => "Calendar-$RandomID",
            Color        => '#3A87AD',
            GroupID      => $GroupID,
            UserID       => $UserID,
        },
        Success => 0,
    },
);

for my $Test (@Tests) {

    # a hívás elvégzése
    my %Calendar = $CalendarObject->CalendarCreate(
        %{ $Test->{Config} },
    );

    # adatok ellenőrzése
    if ( $Test->{Success} ) {
        for my $Key (qw(CalendarID GroupID CalendarName Color CreateTime CreateBy ChangeTime ChangeBy ValidID)) {
            $Self->True(
                $Calendar{$Key},
                "$Test->{Name} - $Key exists",
            );
        }

        KEY:
        for my $Key ( sort keys %{ $Test->{Config} } ) {
            next KEY if $Key eq 'UserID';

            $Self->IsDeeply(
                $Test->{Config}->{$Key},
                $Calendar{$Key},
                "$Test->{Name} - Data for $Key",
            );
        }
    }
    else {
        $Self->False(
            $Calendar{CalendarID},
            "$Test->{Name} - No success",
        );
    }
}
            ]]></programlisting>
        </para>
    </section>

    <section>
        <title>Előfeltételek a teszteléshez</title>
        <para>
            Hogy képes legyen lefuttatni az egységteszteket, arra van szüksége, hogy az
összes választható Perl-modul telepítve legyen, kivéve azokat, amelyek az Ön
által használt adatbázis háttérprogramoktól eltérőkhöz valók. Futtassa a
<filename>bin/otrs.CheckModules.pl</filename> parancsfájlt a modultelepítés
ellenőrzéséhez.
        </para>
        <para>
            Szüksége van egy teljes képzésű tartományneven (FQDN) futó OTRS webes
előtétprogram egy példányára, amely az OTRS helyi
<filename>Config.pm</filename> fájljában be van állítva. Ennek az OTRS
példánynak ugyanazt az adatbázist kell használnia, amelyek az
egységtesztekhez vannak beállítva.
        </para>
    </section>

    <section>
        <title>Tesztelés</title>
        <para>
            A tesztek futtatásához egyszerűen használja a <filename>bin/otrs.Console.pl
Dev::UnitTest::Run --test Calendar</filename> parancsot a
<filename>scripts/test/Calendar.t</filename> fájl használatához.
        </para>
        <para>
            <programlisting><![CDATA[
shell:/opt/otrs> bin/otrs.Console.pl Dev::UnitTest::Run --test Calendar
+-------------------------------------------------------------------+
/opt/otrs/scripts/test/Calendar.t:
+-------------------------------------------------------------------+
.................................................................................................
=====================================================================
yourhost ran tests in 2s for OTRS 6.0.x git
All 97 tests passed.
shell:/opt/otrs>
            ]]></programlisting>
        </para>
        <para>
            Akár több tesztet is lefuttathat egyszerre, csak adjon meg további
<literal>--test</literal> argumentumokat a parancsnak:
        </para>
        <para>
            <programlisting><![CDATA[
shell:/opt/otrs> bin/otrs.Console.pl Dev::UnitTest::Run --test Calendar --test Appointment
+-------------------------------------------------------------------+
/opt/otrs/scripts/test/Calendar.t:
+-------------------------------------------------------------------+
.................................................................................................
+-------------------------------------------------------------------+
/opt/otrs/scripts/test/Calendar/Appointment.t:
+-------------------------------------------------------------------+
..................................................................................................................
=====================================================================
yourhost ran tests in 5s for OTRS 6.0.x git
All 212 tests passed.
shell:/opt/otrs>
            ]]></programlisting>
        </para>
        <para>
            Ha argumentumok nélkül hajtja végre a <filename>bin/otrs.Console.pl
Dev::UnitTest::Run</filename> parancsot, akkor le fogja futtatni a
rendszeren található összes tesztet. Ne feledje, hogy ez eltarthat egy
ideig, amíg befejeződik.
        </para>
        <para>
            Adja meg a <literal>--verbose</literal> argumentumot annak érdekében, hogy
láthassa a sikeres tesztekkel kapcsolatos üzeneteket is. A teszt során
előforduló bármilyen hiba megjelenítésre kerül függetlenül ettől a
kapcsolótól, és biztosítva lesz, hogy azok ténylegesen felvételre kerülnek a
tesztbe.
        </para>
    </section>

    <section>
        <title>Egységteszt API</title>
        <para>
            Az OTRS API-t biztosít az egységteszteléshez, amely az előző példában volt
használva. Itt fel fogjuk sorolni a legfontosabb függvényeket, de nézze meg
a <ulink
url="https://otrs.github.io/doc/api/otrs/6.0/Perl/Kernel/System/UnitTest.pm.html"><literal>Kernel::System::UnitTest</literal></ulink>
internetes API hivatkozását is.
        </para>
        <variablelist>
            <varlistentry>
                <term><literal>True()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény azt teszteli, hogy a megadott skalár érték igaz érték-e a
Perlben.
                    </para>
                    <para>
                        <programlisting><![CDATA[
$Self->True(
    1,
    'Az 1 skalár mindig igazként lesz kiértékelve'
);
                        ]]></programlisting>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>False()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény azt teszteli, hogy a megadott skalár érték hamis érték-e a
Perlben.
                    </para>
                    <para>
                        <programlisting><![CDATA[
$Self->False(
    0,
    'A 0 skalár mindig hamisként lesz kiértékelve'
);
                        ]]></programlisting>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>Is()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény azt teszteli, hogy a megadott skalár változók egyenlők-e.
                    </para>
                    <para>
                        <programlisting><![CDATA[
$Self->Is(
    $A,
    $B,
    'Tesztnév',
);
                        ]]></programlisting>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>IsNot()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény azt teszteli, hogy a megadott skalár változók nem egyenlők-e.
                    </para>
                    <para>
                        <programlisting><![CDATA[
$Self->IsNot(
    $A,
    $B,
    'Tesztnév'
);
                        ]]></programlisting>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>IsDeeply()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény összetett adatszerkezeteket hasonlít össze az
egyenlőséghez. <literal>$A</literal> és <literal>$B</literal> hivatkozás
kell legyen.
                    </para>
                    <para>
                        <programlisting><![CDATA[
$Self->IsDeeply(
    $A,
    $B,
    'Tesztnév'
);
                        ]]></programlisting>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>IsNotDeeply()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény összetett adatszerkezeteket hasonlít össze a nem
egyenlőséghez. <literal>$A</literal> és <literal>$B</literal> hivatkozás
kell legyen.
                    </para>
                    <para>
                        <programlisting><![CDATA[
$Self->IsNotDeeply(
    $A,
    $B,
    'Tesztnév'
);
                        ]]></programlisting>
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            Emellett az egységteszt segítő objektum biztosít néhány hasznos metódust is
a gyakori tesztelési feltételekhez. A teljes hivatkozásért nézze meg a
<ulink
url="https://otrs.github.io/doc/api/otrs/6.0/Perl/Kernel/System/UnitTest/Helper.pm.html"><literal>Kernel::System::UnitTest::Helper</literal></ulink>
internetes API hivatkozását.
        </para>
        <variablelist>
            <varlistentry>
                <term><literal>GetRandomID()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény előállít egy véletlenszerű azonosítót, amely egyedi
azonosítóként használható a tesztekben. Garantált, hogy egy teszten belül ez
a függvény soha nem ad vissza kettőzött értéket.
                    </para>
                    <note>
                        <para>
                            Ne feledje, hogy ezek a számok nem valódi véletlen számok, és csak
tesztadatok előállításához szabad használni.
                        </para>
                    </note>
                    <para>
                        <programlisting><![CDATA[
my $RandomID = $Helper->GetRandomID();
# $RandomID = 'test6326004144100003';
                        ]]></programlisting>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>TestUserCreate()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény létrehoz egy teszt felhasználót, amely használható a
tesztekben. Automatikusan érvénytelenre lesz állítva a destruktor
közben. Visszaadja az új felhasználó bejelentkezési nevét, a jelszó pedig
ugyanaz lesz.
                    </para>
                    <para>
                        <programlisting><![CDATA[
my $TestUserLogin = $Helper->TestUserCreate(
    Groups   => ['admin', 'users'],          # elhagyható, csoportok listája, amelyhez a felhasználót hozzá kell adni (írás, olvasás jogokkal)
    Language => 'hu',                        # elhagyható, alapértelmezetten 'en', ha nincs megadva
);
                        ]]></programlisting>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>FixedTimeSet()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény lehetővé teszi a rendszeridő felülbírálását egészen addig,
amíg az objektum él. Átadhat egy elhagyható időparamétert, amelyet használni
kell. Ha nincs átadva, akkor az aktuális rendszeridő lesz használva.
                    </para>
                    <note>
                        <para>
                            A <literal>Kernel::System::Time</literal> és a
<literal>Kernel::System::DateTime</literal> metódusainak összes meghívása a
megadott időt fogja használni ezután.
                        </para>
                    </note>
                    <para>
                        <programlisting><![CDATA[
$HelperObject->FixedTimeSet(366475757);         # időbélyeggel
$HelperObject->FixedTimeSet($DateTimeObject);   # az előzőleg létrehozott DateTime objektummal
$HelperObject->FixedTimeSet();                  # beállítás a jelenlegi dátumra és időre
                        ]]></programlisting>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>FixedTimeUnset()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény visszaállítja a rendes rendszeridő viselkedést.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>FixedTimeAddSeconds()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény valamennyi másodpercet ad ahhoz a rögzített rendszeridőhöz,
amelyet a <literal>FixedTimeSet()</literal> korábban beállított. Átadhat
negatív értéket, hogy visszamenjen az időben.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>ConfigSettingChange()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény átmenetileg rendszerszinten megváltoztat egy
rendszerbeállítást egy másik értékre mind a <literal>ConfigObject</literal>
aktuális példányában, mind a rendszerbeállításokban is a lemezen. Akkor lesz
visszaállítva, amikor a <literal>Helper</literal> objektum megsemmisül.
                    </para>
                    <note>
                        <para>
                            Ne feledje, hogy ez jelenleg nem működik fürtözött környezetekben.
                        </para>
                    </note>
                    <para>
                        <programlisting><![CDATA[
$Helper->ConfigSettingChange(
    Valid => 1,            # (elhagyható) beállítás engedélyezése vagy letiltása
    Key   => 'MySetting',  # beállítás neve
    Value => { ... } ,     # beállítás értéke
);
                        ]]></programlisting>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>CustomCodeActivate()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény átmenetileg egyéni kódot fog felvenni a rendszerbe. Például
ezt használhatja egy másik osztályból származó szubrutin
felüldefiniálásához. Ez a változtatás megmarad a teszt emlékeztetőjénél
is. Az összes kód eltávolításra kerül, amikor a <literal>Helper</literal>
objektum megsemmisül.
                    </para>
                    <note>
                        <para>
                            Ne feledje, hogy ez jelenleg nem működik fürtözött környezetekben.
                        </para>
                    </note>
                    <para>
                        <programlisting><![CDATA[
$Helper->CustomCodeActivate(
    Code => q^
use Kernel::System::WebUserAgent;
package Kernel::System::WebUserAgent;
use strict;
use warnings;
{
    no warnings 'redefine';
    sub Request {
        my $JSONString = '{"Results":{},"ErrorMessage":"","Success":1}';
        return (
            Content => \$JSONString,
            Status  => '200 OK',
        );
    }
}
1;^,
    Identifier => 'News',   # (elhagyható) kódazonosító a fájlnévbe való felvételhez
);
                        ]]></programlisting>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>ProvideTestDatabase()</literal></term>
                <listitem>
                    <para>
                        Ez a függvény egy átmeneti adatbázist fog biztosítani a teszthez. Először
határozza meg a teszt adatbázis beállításait a
<filename>Kernel/Config.pm</filename> fájlban, azaz:
                    </para>
                    <para>
                        <programlisting><![CDATA[
$Self->{TestDatabase} = {
    DatabaseDSN  => 'DBI:mysql:database=otrs_test;host=127.0.0.1;',
    DatabaseUser => 'otrs_test',
    DatabasePw   => 'otrs_test',
};
                        ]]></programlisting>
                    </para>
                    <para>
                        A metódushívás felül fogja bírálni a globális adatbázis-beállítást a teszt
időtartama alatt, azaz az átmeneti adatbázis fogja fogadni az összes olyan
hívást, amelyet a <literal>DBObject</literal> rendszer küldött át.
                    </para>
                    <para>
                        Az összes adatbázis-tartalom automatikusan eldobásra kerül, amikor a
<literal>Helper</literal> objektum megsemmisül.
                    </para>
                    <para>
                        Ez a metódus <literal>undef</literal> értéket ad vissza abban az esetben, ha
a teszt adatbázis nincs beállítva. Ha be van állítva, de a mellékelt XML nem
olvasható vagy nem hajtható végre, akkor a metódus <literal>die()</literal>
függvénye lesz meghívva a teszt hibával történő megszakításához.
                    </para>
                    <para>
                        <programlisting><![CDATA[
$Helper->ProvideTestDatabase(
    DatabaseXMLString => $XML,      # (elhagyható) OTRS adatbázis XML-séma a végrehajtáshoz
                                    # vagy
    DatabaseXMLFiles => [           # (elhagyható) betöltendő és végrehajtandó XML-fájlok listája
        '/opt/otrs/scripts/database/otrs-schema.xml',
        '/opt/otrs/scripts/database/otrs-initial_insert.xml',
    ],
);
                        ]]></programlisting>
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
</section>
